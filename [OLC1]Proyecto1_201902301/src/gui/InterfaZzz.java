/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import compi.Parser;
import static func.Traduccion.Trad;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.JOptionPane;

/**
 *
 * @author Piter
 */
public class InterfaZzz extends javax.swing.JFrame {
    String ola = "";
    /**
     * Creates new form InterfaZzz
     */
    public InterfaZzz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenuBar5 = new javax.swing.JMenuBar();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuBar6 = new javax.swing.JMenuBar();
        jMenu12 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu16 = new javax.swing.JMenu();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("File");
        jMenuBar4.add(jMenu7);

        jMenu8.setText("Edit");
        jMenuBar4.add(jMenu8);

        jMenu9.setText("File");
        jMenuBar5.add(jMenu9);

        jMenu10.setText("Edit");
        jMenuBar5.add(jMenu10);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenu11.setText("jMenu11");

        jMenu12.setText("File");
        jMenuBar6.add(jMenu12);

        jMenu13.setText("Edit");
        jMenuBar6.add(jMenu13);

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu16.setText("jMenu16");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setForeground(new java.awt.Color(0, 153, 153));

        jLabel1.setText("Nombre:");

        jLabel2.setText("Entrada:");

        jTextArea1.setBackground(new java.awt.Color(0, 102, 153));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setText("Salida:");

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(102, 255, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel5.setText("Analizador:");

        jLabel6.setText("Ninguno");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(330, 330, 330))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(65, 65, 65)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 204));

        jMenu1.setText("Archivo");

        jMenuItem4.setText("Abrir Archivo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Guardar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Guardar Como");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analizador ");

        jMenuItem3.setText("JSON");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem11.setText("SP");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu14.setText("Ejecutar");

        jMenuItem7.setText("Ejecutar traducción");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem7);

        jMenuBar1.add(jMenu14);

        jMenu15.setText("Reporte");

        jMenuItem8.setText("Reporte de Tokens");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem8);

        jMenuItem9.setText("Reporte de Errores Léxicos");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem9);

        jMenuBar1.add(jMenu15);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private String rutaSeleccionada = "";
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        //Método para abrir un archivo
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.getName().toLowerCase().endsWith(".sp") || file.getName().toLowerCase().endsWith(".json") || file.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Archivos .sp y .json";
            }
        });

        int result = fileChooser.showOpenDialog(this); // "this" se refiere al JFrame actual

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            if (selectedFile != null) {
                // Obtener la ruta completa del archivo y almacenarla en la variable
                rutaSeleccionada = selectedFile.getAbsolutePath();
                // Utiliza rutaSeleccionada según tus necesidades
                System.out.println("Ruta del archivo seleccionado: " + rutaSeleccionada);
                // Obtener el nombre del archivo y mostrarlo en jLabel4
                String fileName = selectedFile.getName();
                jLabel4.setText(fileName);

                // Verifica la extensión del archivo y actúa en consecuencia
                if (fileName.endsWith(".sp")) {
                    try {
                        BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
                        String line;
                        StringBuilder content = new StringBuilder();

                        while ((line = reader.readLine()) != null) {
                            content.append(line).append("\n");
                        }
                        reader.close();

                        // Mostrar el contenido en jTextArea1
                        jTextArea1.setText(content.toString());
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                } else if (fileName.endsWith(".json")) {
                    // Procesa el archivo .json y muestra el contenido en jTextArea1
                    // Puedes usar bibliotecas como Gson o Jackson para trabajar con JSON
                    try {
                        FileReader reader = new FileReader(selectedFile);
                        BufferedReader bufferedReader = new BufferedReader(reader);
                        StringBuilder jsonContent = new StringBuilder();
                        String line;
                        while ((line = bufferedReader.readLine()) != null) {
                            jsonContent.append(line).append("\n");
                        }
                        reader.close();

                        // Mostrar el contenido JSON en jTextArea1
                        jTextArea1.setText(jsonContent.toString());
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:

        // Obtén el texto del jTextArea1
        String texto = jTextArea1.getText();

        if (!rutaSeleccionada.isEmpty()) {
            try {
                FileWriter escritor = new FileWriter(rutaSeleccionada);
                BufferedWriter bufferEscritor = new BufferedWriter(escritor);
                bufferEscritor.write(texto);

                // Flush y cierra el archivo
                bufferEscritor.flush();
                bufferEscritor.close();

                JOptionPane.showMessageDialog(this, "Los datos se han guardado correctamente en " + rutaSeleccionada);
            } catch (IOException e) {
                // Manejo de excepciones en caso de error al guardar
                JOptionPane.showMessageDialog(this, "Error al guardar los datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un archivo para guardar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
 
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    
    private String contenidoJTextArea = "";
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // Obtener el contenido actual del JTextArea
        contenidoJTextArea = jTextArea1.getText();

        // Verificar si el JTextArea está vacío
        if (contenidoJTextArea.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El JTextArea está vacío. No se puede guardar.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método sin guardar
        }

        // Crear un diálogo de guardado
        JFileChooser fileChooser = new JFileChooser();

        // Mostrar el diálogo de guardado
        int resultado = fileChooser.showSaveDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            // El usuario ha seleccionado una ubicación y un nombre de archivo
            File archivo = fileChooser.getSelectedFile();

            // Obtener la extensión del archivo elegida por el usuario
            String nombreArchivo = archivo.getAbsolutePath();
            String extension = "";

            int i = nombreArchivo.lastIndexOf('.');
            if (i > 0) {
                extension = nombreArchivo.substring(i + 1);
            }

            try {
                // Crear un FileWriter para escribir el contenido en el archivo
                FileWriter escritor = new FileWriter(archivo);

                // Escribir el contenido del JTextArea en el archivo
                escritor.write(contenidoJTextArea);

                // Cerrar el FileWriter
                escritor.close();
            } catch (IOException ex) {
                // Manejar las excepciones de E/S (puedes mostrar un mensaje de error)
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        
        if("json".equals(ola)){
            analizarjson(jTextArea1.getText());
            func.Funcion.htmltokens();
            func.Funcion.htmltokenserrores();
            func.Funcion.getnamezz(jLabel4.getText());
        }
        else if("sp".equals(ola)){
            analizar(jTextArea1.getText());
            func.Funcion.htmltokens_stat();
            func.Funcion.htmltokenserrores_stat();
            func.Traduccion.database();
                   double [] numeros ={3.0,2.0,5.0,4.0,1.0};
                    String[] ejeX={ "1","2","3","4","5"};
                    Graficas.graf.barras("Grafica de barras", "EjeX", "EjeY", numeros, ejeX);  
                    Graficas.graf.linea("Grafuca de líneas", "EjeX", "EjeY", numeros, ejeX); 
                    Graficas.graf.Pie("Gráfica de Pie", "EjeX", "EjeY", numeros, ejeX); 
        }
        
     
        StringBuilder entrada = new StringBuilder();
        func.Traduccion.Trad.forEach((String valor) -> {

            //System.out.println(valor);
            entrada.append(valor).append("\n");
        });
        // Limpiar el contenido actual de jTextArea2
        jTextArea2.setText("");
        jTextArea2.append(entrada.toString());
    
         
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        jLabel6.setText("json");
        ola = "json";

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // SP
        ola = "sp";
        jLabel6.setText("sp");
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        //TOKENS
        if ("json".equals(ola)) {

            // Ruta al archivo HTML que deseas abrir
            //String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\SEGUNDO SEMESTRE 2023\\COMPI 1\\LABORATORIO\\OLC1Proyecto1_201902301\\Proyecto1_netbeans\\Py1\\tablatokens.html";
               
            String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\VACAS DICIEMBRE 2023\\COMPI1\\LAB\\Probanding\\tablatokens.html";
            
            
            
            // Verifica si el sistema soporta la clase Desktop
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File file = new File(filePath);

                // Verifica si el archivo existe y es un archivo válido
                if (file.exists() && file.isFile()) {
                    try {
                        desktop.open(file); // Abre el archivo en el navegador predeterminado
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.err.println("El archivo no existe o no es válido.");
                }
            } else {
                System.err.println("El sistema no soporta la clase Desktop.");
            }
            
            
    
        }
        else if("sp".equals(ola)){
            
                        // Ruta al archivo HTML que deseas abrir
            String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\SEGUNDO SEMESTRE 2023\\COMPI 1\\LABORATORIO\\OLC1Proyecto1_201902301\\Proyecto1_netbeans\\Py1\\tablatokens_stat.html";

            

            
            // Verifica si el sistema soporta la clase Desktop
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File file = new File(filePath);

                // Verifica si el archivo existe y es un archivo válido
                if (file.exists() && file.isFile()) {
                    try {
                        desktop.open(file); // Abre el archivo en el navegador predeterminado
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.err.println("El archivo no existe o no es válido.");
                }
            } else {
                System.err.println("El sistema no soporta la clase Desktop.");
            }
            
            
            
            
        }
        
        
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed

        //ERRORES
        if ("json".equals(ola)) {

            // Ruta al archivo HTML que deseas abrir
            //String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\SEGUNDO SEMESTRE 2023\\COMPI 1\\LABORATORIO\\OLC1Proyecto1_201902301\\Proyecto1_netbeans\\Py1\\tablatokenserrores.html";

            String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\VACAS DICIEMBRE 2023\\COMPI1\\LAB\\Probanding\\tablatokenserrores.html";

            
            
            // Verifica si el sistema soporta la clase Desktop
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File file = new File(filePath);

                // Verifica si el archivo existe y es un archivo válido
                if (file.exists() && file.isFile()) {
                    try {
                        desktop.open(file); // Abre el archivo en el navegador predeterminado
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.err.println("El archivo no existe o no es válido.");
                }
            } else {
                System.err.println("El sistema no soporta la clase Desktop.");
            }

        } else if ("sp".equals(ola)) {

            // Ruta al archivo HTML que deseas abrir
            String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\SEGUNDO SEMESTRE 2023\\COMPI 1\\LABORATORIO\\OLC1Proyecto1_201902301\\Proyecto1_netbeans\\Py1\\tablatokenserrores_stat.html";

            // Verifica si el sistema soporta la clase Desktop
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File file = new File(filePath);

                // Verifica si el archivo existe y es un archivo válido
                if (file.exists() && file.isFile()) {
                    try {
                        desktop.open(file); // Abre el archivo en el navegador predeterminado
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.err.println("El archivo no existe o no es válido.");
                }
            } else {
                System.err.println("El sistema no soporta la clase Desktop.");
            }

        }
        
        
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed
    
    
    // Realizar Analisis
    // Realizar Analisis
    public static void analizar (String entrada){
        try {
            compi.Lexer lexer = new compi.Lexer(new StringReader(entrada)); 
            compi.Parser parser = new compi.Parser(lexer);
            parser.parse();
            System.out.println("\n##### Resultado: #####\n"+compi.Parser.resultado);
        } catch (Exception e) {
            System.out.println("Error fatal en compilación de entrada.");
            System.out.println(e);
        } 
        
        
    }
    
        public static void analizarjson(String entrada){
        try {
            analizarxd.Lexer lexer = new analizarxd.Lexer(new StringReader(entrada)); 
            analizarxd.Parser parser = new analizarxd.Parser(lexer);
            parser.parse();
            System.out.println("\n##### Resultado: #####\n"+compi.Parser.resultado);
        } catch (Exception e) {
            System.out.println("Error fatal en compilación de entrada.");
            System.out.println(e);
        } 
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaZzz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaZzz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaZzz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaZzz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaZzz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JMenuBar jMenuBar6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
