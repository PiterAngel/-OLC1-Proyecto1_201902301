
package com.mycompany.proyecto1;
import Analizadores.Sintactico;
import Analizadores.Lexico;
import Simbolos.Conjunto;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.MediaTracker;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;


public class Proyecto1 extends javax.swing.JFrame {
 String ola = "";
    public static ArrayList<error> listaErrores = new ArrayList<error>();
    
    ArrayList<Archivos> L_archivos = new ArrayList<>();
    private ArrayList<JButton> botones;
    private JPanel panel;
    private int btn_actual = 1;
    private int expr_actual = 1;
    private int contadorBotones = 1;
    
    public Proyecto1() {
        initComponents();
        this.setLocationRelativeTo(null);
        botones = new ArrayList<JButton>();
        //Botones dinamicos
        panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton agregarBoton = new JButton("Archivo 1");
        agregarBoton.setBackground(new Color(132, 99, 106)); // verde oscuro
        agregarBoton.setForeground(Color.WHITE);
        this.botonAccion(agregarBoton);
        panel.add(agregarBoton);
        this.jScrollPane4.setViewportView(panel);
        this.jScrollPane4.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        
        
        L_archivos.add(new Archivos(btn_actual));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEntrada = new javax.swing.JTextArea();
        btnAnalizar = new javax.swing.JButton();
        btnAutomata = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jComboBoxEXP = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        label_ima = new javax.swing.JLabel();
        jComboBoxREP = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 204));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(102, 255, 51));
        jTextArea2.setRows(5);
        jTextArea2.setText(">>\n");
        jTextArea2.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("Consola");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        txtEntrada.setBackground(new java.awt.Color(153, 153, 255));
        txtEntrada.setColumns(20);
        txtEntrada.setRows(5);
        txtEntrada.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtEntradaPropertyChange(evt);
            }
        });
        txtEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEntradaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtEntrada);

        btnAnalizar.setBackground(new java.awt.Color(51, 204, 255));
        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAnalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnAutomata.setBackground(new java.awt.Color(0, 51, 102));
        btnAutomata.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAutomata.setForeground(new java.awt.Color(255, 255, 255));
        btnAutomata.setText("Analizar");
        btnAutomata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutomataActionPerformed(evt);
            }
        });

        jScrollPane4.setBackground(new java.awt.Color(0, 153, 153));
        jScrollPane4.setForeground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAutomata, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAutomata, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jComboBoxEXP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEXPActionPerformed(evt);
            }
        });

        jScrollPane3.setBackground(new java.awt.Color(102, 255, 102));
        jScrollPane3.setForeground(new java.awt.Color(153, 153, 153));

        label_ima.setBackground(new java.awt.Color(153, 255, 204));
        jScrollPane3.setViewportView(label_ima);

        jComboBoxREP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar reporte...", "AFND", "Errores" }));
        jComboBoxREP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxREPActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Reportes");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("                 ID");

        menuBar.setBackground(new java.awt.Color(204, 255, 204));

        fileMenu.setMnemonic('f');
        fileMenu.setText("Archivo");

        newMenuItem.setText("Nuevo");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Abrir");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Guardar");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Guardar Como");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Tokens");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Reporte de Tokens");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(190, 190, 190)
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(jComboBoxREP, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxEXP, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxREP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBoxEXP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed

        if("json".equals(ola)){
            func.Funcion.htmltokens();
            func.Funcion.htmltokenserrores();
        }
        
        
        try {
            String result = "";
            //Se ejecuta el lexico y sintactico.
            listaErrores.clear();
            Sintactico sintactico = new Sintactico(new Lexico(new BufferedReader(new StringReader(txtEntrada.getText()))));
            sintactico.parse();
            generarReporteHTML(listaErrores);
            //        System.out.println(sintactico.resultados);
            LinkedList<Object> lista_er = sintactico.lista_er;
            LinkedList<Pruebas> lista_pruebas = sintactico.lista_pruebas;
            int cont_expr = 1;
            
            //para añadir expresiones al combobox
            DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) jComboBoxEXP.getModel();
            jComboBoxEXP.removeAllItems();

            Simbolos sim = new Simbolos();
            
            //Recorremos la lista de expresiones de nuestro archivo de entrada
            for(int i = 0; i < lista_er.size(); i++){
                System.out.println("Expresion " + i);
                if(lista_er.get(i) != null){
                    //Extraemos el arbol y graficamos
                    if (lista_er.get(i) instanceof Expresiones) {
                        Expresiones clase = (Expresiones) lista_er.get(i);
                        
                        //
                        clase.getArbol().archivo = btn_actual + "";
                        clase.getArbol().id = cont_expr+"";
                        clase.getArbol().MetodoArbol();
                        clase.getArbol().GraficarThompson();
                        sim.agregarExpresiones(clase);
                        cont_expr++;
                        
                        //añadir expresion regular al combobox
                        
                        model.addElement(clase.getId());
                        
                    }else if (lista_er.get(i) instanceof Conjunto){
                        Conjunto clase = (Conjunto) lista_er.get(i);
                        sim.agregarConjunto(clase);
                    }
                }
                
                
            }
            
            sim.pruebas.addAll(sintactico.lista_pruebas); 
            for (Archivos instancia : L_archivos) {
                if (instancia.id == btn_actual) {
                    instancia.sim = sim; 
                    instancia.texto = txtEntrada.getText();
                    break;
                }
            }
            
            
            jComboBoxEXP.revalidate();
            this.jTextArea2.setText("    >> Automatas han sido generados.");

        } catch (Exception ex) {
            Logger.getLogger(Proyecto1.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error fatal en compilación de entrada.");
//                    System.out.println("Causa: "+ex.getCause());
        }


    }//GEN-LAST:event_btnAnalizarActionPerformed

    
    public void generarReporteHTML(ArrayList<error> errores) throws IOException {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            
            String path = "ERRORES_201902301/Reporteerrores" + btn_actual + ".html";
            fichero = new FileWriter(path);
            pw = new PrintWriter(fichero);
            
            //Comenzamos a escribir el html
            pw.println("<!DOCTYPE html>\n" +
"<html>\n" +
"<head>\n" +
"  <title>Reporte - Archivo " + btn_actual +"</title>\n" +
"  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\">\n" +
"  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"></script>\n" +
"</head>\n" +
"<body>\n" +
"    <div class=\"container-fluid\">\n" +
"    <div class=\"p-3 bg-info text-white border border-dark sticky-top\">\n" +
"      <h1 class=\"display-4 text-center\">Reporte de Errores - Archivo " + btn_actual +"</h1>\n" +
"    </div>\n" +
"    <table class=\"table table table-striped table-hover\">\n" +
"      <thead class=\"thead-dark\">\n" +
"        <tr>\n" +
"          <th>Error</th>\n" +
"          <th>Descripcion</th>\n" +
"          <th>Fila</th>\n" +
"          <th>Columna</th>\n" +
"        </tr>\n" +
"      </thead>\n" +
"      <tbody>");

            for (error err : errores) {
                pw.println("<tr>");
                 pw.println("<td>" + err.tipo + "</td>");
                pw.println("<td>" + err.descripcion + "</td>");
                pw.println("<td>" + err.fila + "</td>");
                pw.println("<td>" + err.columna + "</td>");
                pw.println("</tr>");
            }

            pw.println("      </tbody>\n" +
"    </table>\n" +
"  </div>\n" +
"</body>\n" +
"</html>");
            
        } catch (Exception e) {
        } finally {
            if (null != fichero) {
                fichero.close();
            }
        }
        try {

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            txtEntrada.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Proyecto1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Proyecto1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        contadorBotones++;
        
        L_archivos.add(new Archivos(contadorBotones));
        JButton nuevoBoton = new JButton("Archivo " + contadorBotones);
        this.botonAccion(nuevoBoton);
        panel.add(nuevoBoton);

        // Actualizar el panel de botones y el JScrollPane
        panel.revalidate();
        panel.repaint();
        
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void jComboBoxEXPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEXPActionPerformed
        int selectedIndex = jComboBoxEXP.getSelectedIndex();
        expr_actual = selectedIndex + 1;
    }//GEN-LAST:event_jComboBoxEXPActionPerformed

    private void jComboBoxREPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxREPActionPerformed
        String elementoSeleccionado = jComboBoxREP.getSelectedItem().toString();
        switch (elementoSeleccionado) {
            case "Arbol":
                mostrarIMG("ARBOLES_201902301/Arbol_Sintactico");
                break;
            case "Tabla de Siguientes":
                mostrarIMG("SIGUIENTES_201902301/Tabla_siguientes" );
                break;
            case "Tabla de Transiciones":
                mostrarIMG("TRANSICIONES_201902301/Tabla_transiciones");
                break;
            case "AFD":
                mostrarIMG("AFD_201902301/AFD" );
                break;
            case "AFND":
                mostrarIMG("AFND_201902301/AFND" );
                break;
            case "Errores":
            {
                try {
                    Desktop.getDesktop().open(new File("ERRORES_201902301/Reporteerrores" + btn_actual + ".html"));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "No se ha analizado el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
                break;

            case "":
                System.exit(0);
                break;
            default:
                System.out.println("Opción inválida");
        }
    }//GEN-LAST:event_jComboBoxREPActionPerformed

    private void btnAutomataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutomataActionPerformed
        String result = ""; 
        String json = "[ \n";
        for (Archivos instancia : L_archivos) {
            if (instancia.id == btn_actual) {
                if (instancia.sim == null){
                     JOptionPane.showMessageDialog(null, "Aun no se han generado los Automatas ", "Error", JOptionPane.ERROR_MESSAGE);
                    return ;
                }
                for (Pruebas prb : instancia.sim.pruebas) {
                    Expresiones expresion = instancia.sim.obtenerExpresiones(prb.getId());
                    if(expresion != null){
                        //quitar comillas
                        String cad = prb.getCadema().substring(1, prb.getCadema().length() - 1);
                        if(expresion.getArbol().AnalizarCadena(cad,instancia.sim)){
                            
                            result += "La expresión:    " + prb.getCadema()  +"    es válida con la expresión Regular  " + expresion.getId()  + "\n";
                            String cadenaSinBarra = prb.getCadema().replace("\\'", "'");
                            json += "  {\n" +
"    \"valor\":" +  cadenaSinBarra + ",\n" +
"    \"ExpresionRegular\":\"" +  expresion.getId()  + "\",\n" +
"    \"Resultado\":\"Cadena Valida\"\n" +
"  },\n";
                        }else{
                            result += "La expresión:    " + prb.getCadema()  +"    NO   es válida con la expresión Regular  " + expresion.getId() + "\n";                            
                        };
                    }
                }
                break;
            }
        }
        
        this.jTextArea2.setText(result);
        
        json += "]";
        String nuevoJson = json.replaceAll("\\},\\n\\]", "}\n]");
        File archivo = new File("SALIDAS_201902301/Salida" + btn_actual + ".json");

        try {
            FileWriter escritor = new FileWriter(archivo);
            escritor.write(nuevoJson);
            escritor.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAutomataActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        String texto = txtEntrada.getText();
        
        JFileChooser selectorDeArchivo = new JFileChooser();        
        int resultado = selectorDeArchivo.showSaveDialog(null);   
        
        if (resultado == JFileChooser.APPROVE_OPTION) {            
            File archivo = selectorDeArchivo.getSelectedFile();
            try {
                FileWriter escritor = new FileWriter(archivo);
                BufferedWriter bufferEscritor = new BufferedWriter(escritor);
                bufferEscritor.write(texto);
                bufferEscritor.close();

                System.out.println("El texto ha sido guardado en el archivo.");
            } catch (IOException e) {
                System.out.println("Error al intentar guardar el texto en el archivo.");
                e.printStackTrace();
            }
        } else {
            System.out.println("El usuario ha cancelado la operación.");
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        String texto = txtEntrada.getText();

        File archivo = new File("Archivos/Archivo" + btn_actual + ".txt");

        try {
            FileWriter escritor = new FileWriter(archivo);

            escritor.write(texto);

            escritor.close();

            System.out.println("El texto ha sido guardado en el archivo.");
        } catch (IOException e) {
            System.out.println("Error al intentar guardar el texto en el archivo.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void txtEntradaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntradaKeyPressed
        for (Archivos instancia : L_archivos) {
            if (instancia.id == btn_actual) {
                instancia.texto = txtEntrada.getText();
            }
        }
    }//GEN-LAST:event_txtEntradaKeyPressed

    private void txtEntradaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtEntradaPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEntradaPropertyChange

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
                ola = "json";
            if("json".equals(ola)){
            func.Funcion.htmltokens();
            func.Funcion.htmltokenserrores();
        }
        

        //TOKENS
        if ("json".equals(ola)) {

            // Ruta al archivo HTML que deseas abrir
            String filePath = "C:\\Users\\Piter\\Desktop\\USAC\\VACAS DICIEMBRE 2023\\COMPI1\\LAB\\-OLC1-Proyecto1_201902301\\[OLC1]Proyecto1_201902301\\tablatokens.html";

            // Verifica si el sistema soporta la clase Desktop
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File file = new File(filePath);

                // Verifica si el archivo existe y es un archivo válido
                if (file.exists() && file.isFile()) {
                    try {
                        desktop.open(file); // Abre el archivo en el navegador predeterminado
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.err.println("El archivo no existe o no es válido.");
                }
            } else {
                System.err.println("El sistema no soporta la clase Desktop.");
            }
            
            
    
        }
        
        
        
        
        
    }//GEN-LAST:event_contentsMenuItemActionPerformed
    
    private void mostrarIMG(String nombre){
        ImageIcon img = new ImageIcon(nombre + btn_actual + "_" + expr_actual + ".jpg");
        if (img.getImageLoadStatus() == MediaTracker.COMPLETE) {
            img.getImage().flush();
            label_ima.setIcon(img); 
        } else {
            JOptionPane.showMessageDialog(null, "No se ha generado la imagen", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    //Funcion para añadir funcionalidad a los botones 
    private void botonAccion(JButton nuevoBoton){
        nuevoBoton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Obtener el botón que se ha presionado
                JButton botonPresionado = (JButton) e.getSource();

                // Obtener el número del botón a partir de su texto
                String textoBoton = botonPresionado.getText();
                int numBoton = Integer.parseInt(textoBoton.substring(textoBoton.lastIndexOf(" ") + 1));
                
                botonPresionado.setBackground(new Color(95, 135, 17)); // verde oscuro
                botonPresionado.setForeground(Color.WHITE);
                
                
                for (JButton boton : botones) {
                if (boton != botonPresionado) {
                    boton.setBackground(null);
                    boton.setForeground(null);
                    }
                }
                
                btn_actual = numBoton;
                for (Archivos instancia : L_archivos) {
                    if (instancia.id == btn_actual) {
                        txtEntrada.setText(instancia.texto);
                        txtEntrada.repaint();
                    }
                }
            }
        });
        
        Font font = new Font("Arial", Font.BOLD, 12); // Fuente negrita y tamaño 16
        nuevoBoton.setFont(font);
        botones.add(nuevoBoton); 
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Proyecto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Proyecto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Proyecto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Proyecto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Proyecto1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnAutomata;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox<String> jComboBoxEXP;
    private javax.swing.JComboBox<String> jComboBoxREP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel label_ima;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextArea txtEntrada;
    // End of variables declaration//GEN-END:variables

}
