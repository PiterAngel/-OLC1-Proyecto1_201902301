

// ------------  Paquete e importaciones ------------
package compi;

import java_cup.runtime.*;
import java.util.LinkedList;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            func.Funcion.tabla_T_errores_stat((String)s.value, "Error Sintactico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            
}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            func.Funcion.tabla_T_errores_stat((String)s.value, "Error Sintactico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            
}

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales, en reglas lexicas
terminal String PARENTESISABRE, PARENTESISCIERRA, PUNTOYCOMA, LLAVEABRE, LLAVECIERRA, SIGNOMAYOR, SIGNOMENOR, SIGNOMAYORIGUAL, SIGNOMENORIGUAL, SIGNOIGUALIGUAL, SIGNOPUNTO;
terminal String SIGNOPOR, SIGNOMAS, SIGNOMENOS, SIGNODIVISION, SIGNOAND, SIGNOOR, SIGNONOT , SIGNOIGUAL, SIGNOCOMA, SIGNODIFERENTE, SIGNOINCREMENTO, DOLAR;
terminal String  RESERVADA_INT, RESERVADA_DOUBLE, RESERVADA_CHAR, RESERVADA_BOOL, RESERVADA_TRUE, RESERVADA_FALSE, RESERVADA_STRING, RESERVADA_VOID, RESERVADA_MAIN;
terminal String RESERVADA_IF, RESERVADA_CONSOLE, RESERVADA_WRITE, RESERVADA_ELSE, RESERVADA_DEFINIRG, RESERVADA_FOR, RESERVADA_WHILE, RESERVADA_BREAK, RESERVADA_NEWVALOR;
terminal String RESERVADA_GRAFICARBARRAS, CORCHETEABRE, CORCHETECIERRA, RESERVADA_TITULOX, RESERVADA_TITULOY, RESERVADA_TITULO;
terminal String ENTERO, ID, DECIMALES, CHARR, CADENA, RESERVADA_VALORES, RESERVADA_EJEX, RESERVADA_DO, RESERVADA_SWITCH, DOSPUNTOS, RESERVADA_CASE, RESERVADA_DEFAULT, RESERVADA_GRAFICARPIE;




//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion, asignacion;
non terminal lista_instruccion;
non terminal expresion;
non terminal console;
non terminal sentencias;
non terminal if;
non terminal for;
non terminal funciones;
non terminal expresfunc;
non terminal intermedio;
non terminal corchetec;
non terminal tipos; 
non terminal probando;
non terminal incremento; 
non terminal comparativas; 
non terminal while;
non terminal barras, probando2, intermedio2, expresbar, titulos, asignacion2, json, listas, asignacion3, listas2; 
non terminal do;
non terminal switch, casos, caso, casoespecial;
non terminal probando3, intermedio3, asignacion4,listas4, logicos;

//------> PRECEDENCIA
precedence left SIGNOOR, SIGNOAND;
precedence right SIGNONOT;
precedence left SIGNODIFERENTE, SIGNOIGUALIGUAL, SIGNOMENORIGUAL, SIGNOMAYORIGUAL, SIGNOMENOR, SIGNOMAYOR;
precedence left SIGNOMENOS, SIGNOMAS;
precedence left SIGNODIVISION, SIGNOPOR;
precedence right SIGNOMENOS;

//precedence left SIGNOMAYOR, SIGNOMAYORIGUAL, SIGNOMENOR,SIGNOMENORIGUAL, SIGNOIGUALIGUAL, SIGNOIGUAL, SIGNODIFERENTE; 
//precedence left SIGNOAND, SIGNOOR;
//precedence left SIGNONOT;
//precedence left SIGNOMAS;
//precedence left SIGNOMENOS;
//precedence left SIGNOPOR;
//precedence left SIGNODIVISION;




//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------
inicio ::= RESERVADA_VOID RESERVADA_MAIN PARENTESISABRE PARENTESISCIERRA LLAVEABRE lista_instruccion:variablename LLAVECIERRA   {: 
            LinkedList<String>ola= new LinkedList<>();  
            ola.add("def main():");
            func.Traduccion.waozzz++;
            ola.addAll(func.Traduccion.tab((LinkedList)variablename));
            func.Traduccion.waozzz--;
            ola.add("if__name__ = \"__main__\":\n\tmain()");
            func.Traduccion.Trad=ola;
            :}
;

lista_instruccion ::= lista_instruccion:variablename1 instruccion:inzzz      {:  LinkedList<String> tod1 = new LinkedList<>(); tod1.addAll((LinkedList) variablename1); tod1.addAll((LinkedList)inzzz); RESULT =  tod1;   :}
             | instruccion:inzzz                                             {:  LinkedList<String>variablename= new LinkedList<>();  variablename.addAll((LinkedList)inzzz); RESULT = (LinkedList)variablename;   :}
;

instruccion ::= asignacion:ag                                               {: RESULT = ag; :}     
                | error PUNTOYCOMA          
                | sentencias:sent                                           {:  RESULT = sent ;  :}
                | console:cons                                              {:  RESULT = cons;  :}
                | RESERVADA_BREAK PUNTOYCOMA                                {:      LinkedList<String>variablename= new LinkedList<>();  
                                                                                    variablename.add("break") ; RESULT = variablename;  :}            
;





console ::= RESERVADA_CONSOLE SIGNOPUNTO RESERVADA_WRITE PARENTESISABRE expresion:valor PARENTESISCIERRA PUNTOYCOMA    {:  LinkedList<String>variablename= new LinkedList<>();  variablename.add("print(" + valor + ")" ); RESULT = variablename;   :}
;
            

sentencias ::= funciones                {:  LinkedList<String> ola= new LinkedList<>(); ola.add(" "); RESULT = ola; :}  
            | switch:ch                 {:  RESULT = ch;  :}
            | while:wh                  {:  RESULT = wh;  :}
            | for:fr                    {:  RESULT = fr;  :}
            | if:fi                     {:  RESULT = fi;  :}
            | do:od                     {:  RESULT = od;  :}

;

switch::= RESERVADA_SWITCH PARENTESISABRE expresion:exp PARENTESISCIERRA LLAVEABRE casos:sos casoespecial:especial LLAVECIERRA   
                                        {:  
                                            LinkedList<String>variablename= new LinkedList<>();  
                                            variablename.add("def switch(" + exp + "):" ); 
                                            func.Traduccion.waozzz++;
                                            LinkedList<String>name= new LinkedList<>();  
                                            name.add("switcher={" );
                                            variablename.addAll(func.Traduccion.tab((LinkedList)name));
                                            func.Traduccion.waozzz++; 
                                            variablename.addAll(func.Traduccion.tab((LinkedList)sos)); 
                                            variablename.addAll(func.Traduccion.tab((LinkedList)especial))  ; 
                                            func.Traduccion.waozzz--;
                                            LinkedList<String>name5= new LinkedList<>();  
                                            name5.add( "}" ); 
                                            variablename.addAll(func.Traduccion.tab((LinkedList)name5));
                                            func.Traduccion.waozzz--;
                                            RESULT = variablename;
                                        :}
;

casos::= casos:cazzz caso:cass1      {:  LinkedList<String> tod1 = new LinkedList<>(); tod1.addAll((LinkedList)cazzz); tod1.addAll((LinkedList)cass1); RESULT =  tod1;   :}
            | caso:cass2             {:  LinkedList<String> tod2 = new LinkedList<>();  tod2.addAll((LinkedList)cass2); RESULT = (LinkedList)tod2;   :}
; 

caso::= RESERVADA_CASE expresion:exp DOSPUNTOS lista_instruccion:inzzzz      {:  
                                    LinkedList<String>variablename= new LinkedList<>();  
                                    variablename.add(exp + ":"); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)inzzzz));
                                    LinkedList<String>variablename2 = new LinkedList<>();  variablename2.add(",");  
                                    variablename.addAll(func.Traduccion.tab((LinkedList)variablename2));
                                    func.Traduccion.waozzz--;          
                                    RESULT = (LinkedList)variablename;      
  :}
;

casoespecial::= RESERVADA_DEFAULT DOSPUNTOS lista_instruccion:inzzzz    
                {:  
                                    LinkedList<String>variablename= new LinkedList<>();  
                                    variablename.add("default: "); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)inzzzz));
                                    LinkedList<String>variablename2 = new LinkedList<>();  variablename2.add(",");  
                                    variablename.addAll(func.Traduccion.tab((LinkedList)variablename2));
                                    func.Traduccion.waozzz--;          
                                    RESULT = (LinkedList)variablename;                     
  :}
;

do::= RESERVADA_DO LLAVEABRE lista_instruccion:listazdo LLAVECIERRA RESERVADA_WHILE PARENTESISABRE expresion:e1 comparativas:comp expresion:e6 PARENTESISCIERRA PUNTOYCOMA 
                                    {:  
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("while True: "); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listazdo));
                                    LinkedList<String>variablename2= new LinkedList<>();  variablename2.add("if (" + e1.toString() + comp + e6.toString() + "):"); func.Traduccion.waozzz++; 
                                    LinkedList<String>variablename3= new LinkedList<>();  variablename3.add("break");
                                    variablename2.addAll(func.Traduccion.tab((LinkedList)variablename3));
                                    func.Traduccion.waozzz--;
                                    func.Traduccion.waozzz--; variablename.addAll((LinkedList)variablename2) ; RESULT = (LinkedList)variablename;
                                    :}
;


tipos ::=   RESERVADA_STRING     {:  RESULT = "";  :}
            |RESERVADA_DOUBLE    {:  RESULT = "";  :}
;

funciones::= RESERVADA_VOID RESERVADA_DEFINIRG PARENTESISABRE PARENTESISCIERRA LLAVEABRE probando LLAVECIERRA               {:  RESULT = "";  :} 
            | RESERVADA_VOID RESERVADA_GRAFICARBARRAS PARENTESISABRE PARENTESISCIERRA LLAVEABRE probando2 LLAVECIERRA       {:  RESULT = "";  :}
            | RESERVADA_VOID RESERVADA_GRAFICARPIE PARENTESISABRE PARENTESISCIERRA LLAVEABRE probando3 LLAVECIERRA          {:  RESULT = "";  :}
;    

//====================================================
probando ::= probando intermedio        {:  RESULT = "";  :}
            | intermedio                {:  RESULT = "";  :}
;

intermedio ::= expresfunc PUNTOYCOMA        {:  RESULT = "";  :}
;

expresfunc ::= tipos ID:nombre SIGNOIGUAL expresion:exp          {:    RESULT = "";  :}          
;

//====================================================


//====================================================
probando2::= probando2 intermedio2              {:  RESULT = "";  :}
            | intermedio2                   {:  RESULT = "";  :}
;

intermedio2::= RESERVADA_STRING titulos SIGNOIGUAL asignacion2 PUNTOYCOMA               {:  RESULT = "";  :} 
            | RESERVADA_STRING CORCHETEABRE CORCHETECIERRA RESERVADA_EJEX SIGNOIGUAL LLAVEABRE listas LLAVECIERRA PUNTOYCOMA        {:  RESULT = "";  :}
            | RESERVADA_DOUBLE CORCHETEABRE CORCHETECIERRA RESERVADA_VALORES SIGNOIGUAL LLAVEABRE listas2 LLAVECIERRA PUNTOYCOMA       {:  RESULT = "";  :}
;

asignacion2::= CADENA:va1                              {:  RESULT = "";  :}
            | ID:va1                                   {:  RESULT = ""; //RESULT = data.Info.listaVariables.get(va1);  :}
            | json                                      {:  RESULT = "";  :}
;

listas::= asignacion2
            | asignacion2 SIGNOCOMA listas        {:  RESULT = "";  :}
;
 
listas2::=  asignacion3                     {:  RESULT = "";  :}
            | asignacion3 SIGNOCOMA listas2    {:  RESULT = "";  :}
;

asignacion3::= DECIMALES:va1                           {:  RESULT = "";  :}
            | ID:va1                                   {:  RESULT = ""; //RESULT = data.Info.listaVariables.get(va1);  :}
            | json                                     {:  RESULT = "";  :}
;
//====================================================



probando3::= probando3 intermedio3          {:  RESULT = "";  :}
            | intermedio3                   {:  RESULT = "";  :}
;



intermedio3::= RESERVADA_STRING RESERVADA_TITULO SIGNOIGUAL asignacion4 PUNTOYCOMA
            | RESERVADA_STRING CORCHETEABRE CORCHETECIERRA RESERVADA_EJEX SIGNOIGUAL LLAVEABRE listas4 LLAVECIERRA PUNTOYCOMA
            | RESERVADA_DOUBLE CORCHETEABRE CORCHETECIERRA RESERVADA_VALORES SIGNOIGUAL LLAVEABRE listas2 LLAVECIERRA PUNTOYCOMA
;

asignacion4::= CADENA:va1                              {:  RESULT = va1;  :}
            | ID:va1                                   {:  //RESULT = data.Info.listaVariables.get(va1);  :}
            | json                              {:  RESULT = "";  :}
;

listas4::=  asignacion4         {:  RESULT = "";  :}
            | asignacion4 SIGNOCOMA listas4     {:  RESULT = "";  :}
;




//====================================================



json ::= DOLAR LLAVEABRE RESERVADA_NEWVALOR SIGNOCOMA CADENA SIGNOCOMA CADENA:va1 LLAVECIERRA  {:  RESULT = va1;  :}
;

titulos::= RESERVADA_TITULO     {:  RESULT = "";  :}
        |RESERVADA_TITULOX      {:  RESULT = "";  :}
        |RESERVADA_TITULOY          {:  RESULT = "";  :}
;

for ::= RESERVADA_FOR PARENTESISABRE expresion:exp PARENTESISCIERRA LLAVEABRE lista_instruccion:listasfor LLAVECIERRA     
                                    {: 
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("for " + exp + " in range" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listasfor));
                                    func.Traduccion.waozzz--; RESULT = variablename;
                                    :}     
;

while ::= RESERVADA_WHILE PARENTESISABRE expresion:e1 comparativas:comp expresion:e5 PARENTESISCIERRA LLAVEABRE lista_instruccion:listaz LLAVECIERRA    {:  
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("while " + e1 + " " + comp + " " + e5 + ":" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listaz));
                                    func.Traduccion.waozzz--; RESULT = variablename;  :}
            | RESERVADA_WHILE PARENTESISABRE expresion:e3 PARENTESISCIERRA LLAVEABRE lista_instruccion LLAVECIERRA     {:  RESULT = "";  :}
  
;



if ::= RESERVADA_IF PARENTESISABRE expresion:nombreif PARENTESISCIERRA LLAVEABRE lista_instruccion:listazif  corchetec:cierre           
                                    {: 
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("if " + nombreif + ":" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listazif));
                                    func.Traduccion.waozzz--;LinkedList<String>variablename1= new LinkedList<>();  
                                    variablename1.addAll((LinkedList)cierre); variablename.addAll(variablename1); RESULT = variablename;
                                    :}           
;

corchetec ::= LLAVECIERRA           {:  LinkedList<String>variablename= new LinkedList<>();  variablename.add(" ");  RESULT = variablename; :}
            | LLAVECIERRA RESERVADA_ELSE RESERVADA_IF PARENTESISABRE expresion:nombreif PARENTESISCIERRA LLAVEABRE lista_instruccion:listazif  corchetec:cierre           
                                    {: 
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("elif " + nombreif + ":" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listazif));
                                    func.Traduccion.waozzz--;  LinkedList<String>variablename1= new LinkedList<>();  
                                    variablename1.addAll((LinkedList)cierre); variablename.addAll(variablename1); RESULT = variablename;
                                    
                                    :}   
            | LLAVECIERRA RESERVADA_ELSE LLAVEABRE lista_instruccion LLAVECIERRA          {:  RESULT = "";  :}
;








asignacion ::= ID:nombre1 SIGNOIGUAL expresion:var1    PUNTOYCOMA                       {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre1 + " = " + var1 ); RESULT = probandoo;  :}
            | RESERVADA_INT ID:nombre2 SIGNOIGUAL expresion:var2  PUNTOYCOMA            {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre2 + " = " + var2 ); RESULT = probandoo; :}
            | RESERVADA_DOUBLE ID:nombre3 SIGNOIGUAL expresion:var3   PUNTOYCOMA        {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre3 + " = " + var3 ); RESULT = probandoo;  :}
            | RESERVADA_CHAR ID:nombre4 SIGNOIGUAL expresion:var4     PUNTOYCOMA        {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre4 + " = " + var4 ); RESULT = probandoo;   :}
            | RESERVADA_BOOL ID:nombre5 SIGNOIGUAL expresion:var5      PUNTOYCOMA       {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre5 + " = " + var5 ); RESULT = probandoo; :}
            | RESERVADA_STRING ID:nombre6 SIGNOIGUAL expresion:var6    PUNTOYCOMA       {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre6 + " = " + var6 ); RESULT = probandoo;   :}
            | RESERVADA_INT ID:nombre7      PUNTOYCOMA                                  {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre7 + " = None" ); RESULT = probandoo;     :}
            | RESERVADA_DOUBLE ID:nombre8     PUNTOYCOMA                                {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre8 + " = None"  ); RESULT = probandoo;    :}
            | RESERVADA_CHAR ID:nombre9       PUNTOYCOMA                                {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre9 + " = None"  ); RESULT = probandoo;    :}
            | RESERVADA_BOOL ID:nombre10      PUNTOYCOMA                                {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre10 + " = None" ); RESULT = probandoo;    :}
            | RESERVADA_STRING ID:nombre11     PUNTOYCOMA                               {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre11 + " = None"  ); RESULT = probandoo;    :}
;





incremento ::= expresion:va1 SIGNOINCREMENTO {:  RESULT = va1;  :}
;

expresion ::= ENTERO:va1                               {:  RESULT = va1;  :}
            | CHARR:va1                                {:  RESULT = va1;  :}
            | DECIMALES:va1                            {:  RESULT = va1;  :}
            | CADENA:va1                               {:  RESULT = va1;  :}
            | ID:va1                                   {:  RESULT = va1; //data.Info.listaVariables.get(va1);  :}
            | RESERVADA_TRUE:va1                       {:  RESULT = va1;  :}
            | RESERVADA_FALSE:va1                      {:  RESULT = va1;  :}
            | expresion:a SIGNOMAS expresion:b         {:  RESULT= a.toString() +"+"+ b.toString()  ;:}
            | expresion:a SIGNOMENOS expresion:b       {:  RESULT= a.toString() +"-"+ b.toString()  ;:} 
            | expresion:a SIGNOPOR expresion:b         {:  RESULT= a.toString() +"*"+ b.toString()  ;:} 
            | expresion:a SIGNODIVISION expresion:b    {:  RESULT= a.toString() +"/"+ b.toString()  ;:}   
            | SIGNONOT expresion:b                     {:  RESULT=    " not "+ b.toString()  ;:}   
            | SIGNOMENOS expresion:b                   {:  RESULT=    "-"+ b.toString()  ;:} 
            | expresion:a logicos:c expresion:b        {:  RESULT= a.toString() + c.toString() + b.toString()  ;:}  
            | expresion:a SIGNOMAYOR expresion:b       {:  RESULT= a.toString() +">"+ b.toString()  ;:}
            | expresion:a SIGNOMAYORIGUAL expresion:b  {:  RESULT= a.toString() +">="+ b.toString()  ;:}
            | expresion:a SIGNOMENOR expresion:b       {:  RESULT= a.toString() +"<"+ b.toString()  ;:}
            | expresion:a SIGNOMENORIGUAL expresion:b  {:  RESULT= a.toString() +"<="+ b.toString()  ;:}
            | expresion:a SIGNOIGUALIGUAL expresion:b  {:  RESULT= a.toString() +"=="+ b.toString()  ;:}
            | expresion:a SIGNODIFERENTE expresion:b   {:  RESULT= a.toString() +"!="+ b.toString()  ;:}
            | asignacion:a expresion:b comparativas expresion:c PUNTOYCOMA incremento {: LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(a.toString() + b.toString() + c.toString()); RESULT = probandoo;  :}
            | DOLAR LLAVEABRE RESERVADA_NEWVALOR SIGNOCOMA CADENA SIGNOCOMA CADENA:va1 LLAVECIERRA  {:  RESULT = va1;  :}     
;   

logicos::=  SIGNOAND {: RESULT = " and "; :}
            | SIGNOOR {: RESULT = " or "; :}
            | SIGNONOT {: RESULT = " not "; :}
;

comparativas::= SIGNOMAYORIGUAL  {:  RESULT = ">=";  :}
             | SIGNOMAYOR {:  RESULT = ">";  :}
             | SIGNOMENOR   {:  RESULT = "<";  :}
             | SIGNOMENORIGUAL   {:  RESULT = "<=";  :}
             | SIGNODIFERENTE  {:  RESULT = "|=";  :}
             | SIGNOIGUALIGUAL {:  RESULT = "==";  :}
; 