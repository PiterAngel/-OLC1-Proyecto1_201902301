// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/compi/Lexer.jflex


// ------------  Paquete e importaciones ------------
package compi; 

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\1\1\5"+
    "\1\6\1\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\0\1\63\1\0\1\50\1\0\1\30\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\61\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\61\1\113"+
    "\1\114\1\115\7\0\1\3\252\0\2\116\115\0\1\117"+
    "\u01a8\0\2\3\u0100\0\1\120\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\16\23\1\24\1\25"+
    "\1\26\1\1\1\27\2\1\1\30\1\0\1\31\1\32"+
    "\1\0\1\33\1\0\1\34\1\0\1\35\1\36\1\37"+
    "\6\23\1\40\5\23\1\41\7\23\1\0\4\23\1\42"+
    "\1\41\3\0\1\43\1\0\1\44\3\23\1\0\6\23"+
    "\1\0\1\23\1\45\1\23\1\46\1\23\1\0\3\23"+
    "\1\0\2\23\1\0\2\23\1\0\1\23\1\0\1\23"+
    "\1\0\1\46\1\0\1\34\1\47\1\23\2\50\1\51"+
    "\1\23\1\0\2\23\1\0\1\23\1\52\2\53\1\23"+
    "\1\0\1\23\2\54\2\23\1\0\1\23\1\0\1\23"+
    "\1\55\1\0\1\23\2\56\1\23\1\0\1\23\1\0"+
    "\2\57\1\23\1\0\2\23\1\0\1\23\2\60\1\23"+
    "\1\0\2\23\1\0\1\23\1\0\1\23\1\0\1\23"+
    "\2\61\2\62\1\23\1\0\2\23\1\0\1\63\1\23"+
    "\1\0\1\23\2\64\2\65\2\66\1\23\2\67\1\70"+
    "\1\23\1\0\1\23\1\0\1\23\1\71\1\72\1\71"+
    "\1\72\2\73\1\23\1\0\2\23\2\0\1\74\1\23"+
    "\1\0\2\23\2\0\1\23\1\0\1\23\2\75\1\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\1\23\1\0\2\76\1\23\1\0\2\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\121\0\242\0\363\0\121\0\u0144\0\u0195"+
    "\0\121\0\121\0\121\0\u01e6\0\121\0\121\0\121\0\u0237"+
    "\0\u0288\0\121\0\121\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d"+
    "\0\u046e\0\u04bf\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654\0\u06a5"+
    "\0\u06f6\0\u0747\0\u0798\0\u07e9\0\121\0\121\0\121\0\u083a"+
    "\0\121\0\u088b\0\u08dc\0\121\0\363\0\121\0\121\0\u092d"+
    "\0\121\0\u097e\0\u09cf\0\u0a20\0\121\0\121\0\121\0\u0a71"+
    "\0\u0ac2\0\u0b13\0\u0b64\0\u0bb5\0\u0c06\0\u0c57\0\u0ca8\0\u0cf9"+
    "\0\u0d4a\0\u0d9b\0\u0dec\0\u03cc\0\u0e3d\0\u0e8e\0\u0edf\0\u0f30"+
    "\0\u0f81\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u1116\0\u1167\0\u11b8"+
    "\0\121\0\121\0\u1209\0\u125a\0\u12ab\0\121\0\u12fc\0\u0a20"+
    "\0\u134d\0\u139e\0\u13ef\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584"+
    "\0\u15d5\0\u1626\0\u1677\0\u16c8\0\u03cc\0\u1719\0\u03cc\0\u176a"+
    "\0\u17bb\0\u180c\0\u185d\0\u18ae\0\u18ff\0\u1950\0\u19a1\0\u19f2"+
    "\0\u1a43\0\u1a94\0\u1ae5\0\u1b36\0\u1b87\0\u1bd8\0\u1c29\0\121"+
    "\0\u1c7a\0\121\0\u03cc\0\u1ccb\0\u03cc\0\121\0\u03cc\0\u1d1c"+
    "\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u03cc\0\u03cc\0\121"+
    "\0\u1f02\0\u1f53\0\u1fa4\0\u03cc\0\121\0\u1ff5\0\u2046\0\u2097"+
    "\0\u20e8\0\u2139\0\u218a\0\u03cc\0\u21db\0\u222c\0\u03cc\0\121"+
    "\0\u227d\0\u22ce\0\u231f\0\u2370\0\u03cc\0\121\0\u23c1\0\u2412"+
    "\0\u2463\0\u24b4\0\u2505\0\u2556\0\u03cc\0\121\0\u25a7\0\u25f8"+
    "\0\u2649\0\u269a\0\u26eb\0\u273c\0\u278d\0\u27de\0\u282f\0\u2880"+
    "\0\u03cc\0\121\0\u03cc\0\121\0\u28d1\0\u2922\0\u2973\0\u29c4"+
    "\0\u2a15\0\u03cc\0\u2a66\0\u2ab7\0\u2b08\0\u03cc\0\121\0\u03cc"+
    "\0\121\0\u2b59\0\u2baa\0\u2bfb\0\u03cc\0\121\0\u03cc\0\u2c4c"+
    "\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90\0\u03cc\0\u03cc\0\121\0\121"+
    "\0\u03cc\0\121\0\u2de1\0\u2e32\0\u2e83\0\u2ed4\0\u2f25\0\u2f76"+
    "\0\u03cc\0\u2fc7\0\u3018\0\u3069\0\u30ba\0\u310b\0\u315c\0\u31ad"+
    "\0\u31fe\0\u324f\0\u03cc\0\121\0\u32a0\0\u32f1\0\u3342\0\u3393"+
    "\0\u33e4\0\u3435\0\u3486\0\u34d7\0\u3528\0\u3579\0\u35ca\0\u03cc"+
    "\0\121\0\u361b\0\u366c\0\u03cc\0\121";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\27\1\36"+
    "\3\27\1\37\1\40\4\27\1\41\1\42\1\27\1\43"+
    "\1\44\3\27\1\45\1\46\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\27\1\36\3\27\1\37\1\40\3\27"+
    "\1\41\1\42\1\27\1\43\1\44\2\27\1\47\1\50"+
    "\1\51\1\52\1\53\1\2\147\0\1\54\72\0\2\55"+
    "\1\0\3\55\1\56\112\55\10\0\1\57\132\0\1\60"+
    "\5\0\1\60\30\0\1\60\2\0\27\60\23\0\1\61"+
    "\117\0\1\62\4\0\1\63\117\0\1\64\1\0\1\21"+
    "\124\0\1\65\120\0\1\66\120\0\1\67\114\0\1\27"+
    "\5\0\32\27\2\0\27\27\30\0\1\27\5\0\16\27"+
    "\1\70\2\27\1\71\10\27\2\0\15\27\1\70\1\27"+
    "\1\71\7\27\30\0\1\27\5\0\1\72\6\27\1\73"+
    "\6\27\1\74\13\27\2\0\6\27\1\73\6\27\1\74"+
    "\11\27\30\0\1\27\5\0\4\27\1\75\11\27\1\76"+
    "\13\27\2\0\3\27\1\75\11\27\1\76\11\27\30\0"+
    "\1\27\5\0\11\27\1\77\1\27\1\100\16\27\2\0"+
    "\10\27\1\77\1\27\1\100\14\27\30\0\1\27\5\0"+
    "\1\101\15\27\1\102\13\27\2\0\15\27\1\102\11\27"+
    "\30\0\1\27\5\0\21\27\1\103\10\27\2\0\17\27"+
    "\1\103\7\27\30\0\1\27\5\0\5\27\1\104\7\27"+
    "\1\105\14\27\2\0\4\27\1\104\7\27\1\105\12\27"+
    "\30\0\1\27\5\0\1\106\31\27\2\0\27\27\30\0"+
    "\1\27\5\0\4\27\1\107\25\27\2\0\3\27\1\107"+
    "\23\27\30\0\1\27\5\0\23\27\1\110\2\27\1\111"+
    "\3\27\2\0\21\27\1\110\2\27\1\111\2\27\30\0"+
    "\1\27\5\0\10\27\1\112\10\27\1\113\10\27\2\0"+
    "\7\27\1\112\7\27\1\113\7\27\3\0\1\114\24\0"+
    "\1\27\5\0\1\115\15\27\1\116\13\27\2\0\15\27"+
    "\1\116\11\27\30\0\1\27\5\0\7\27\1\117\11\27"+
    "\1\120\10\27\2\0\6\27\1\117\10\27\1\120\7\27"+
    "\122\0\1\121\41\0\1\122\7\0\1\123\22\0\1\122"+
    "\7\0\1\123\73\0\1\124\2\0\1\125\26\0\1\124"+
    "\2\0\1\125\21\0\1\126\107\0\14\62\1\127\104\62"+
    "\2\63\3\0\114\63\22\0\1\130\120\0\1\27\5\0"+
    "\16\27\1\131\13\27\2\0\15\27\1\131\11\27\30\0"+
    "\1\27\5\0\4\27\1\132\25\27\2\0\3\27\1\132"+
    "\23\27\30\0\1\27\5\0\22\27\1\133\7\27\2\0"+
    "\20\27\1\133\6\27\4\0\1\134\23\0\1\27\5\0"+
    "\1\135\31\27\2\0\27\27\30\0\1\27\5\0\15\27"+
    "\1\136\14\27\2\0\14\27\1\136\12\27\30\0\1\27"+
    "\5\0\5\27\1\137\24\27\2\0\4\27\1\137\22\27"+
    "\30\0\1\27\5\0\24\27\1\140\5\27\2\0\22\27"+
    "\1\140\4\27\30\0\1\27\5\0\4\27\1\141\25\27"+
    "\2\0\3\27\1\141\23\27\30\0\1\27\5\0\22\27"+
    "\1\142\7\27\2\0\20\27\1\142\6\27\4\0\1\143"+
    "\23\0\1\27\5\0\13\27\1\144\16\27\2\0\12\27"+
    "\1\144\14\27\30\0\1\27\5\0\21\27\1\145\10\27"+
    "\2\0\17\27\1\145\7\27\30\0\1\27\5\0\1\146"+
    "\31\27\2\0\27\27\30\0\1\27\5\0\23\27\1\147"+
    "\6\27\2\0\21\27\1\147\5\27\30\0\1\27\5\0"+
    "\10\27\1\150\21\27\2\0\7\27\1\150\17\27\3\0"+
    "\1\151\24\0\1\27\5\0\26\27\1\152\3\27\2\0"+
    "\24\27\1\152\2\27\30\0\1\27\5\0\21\27\1\153"+
    "\10\27\2\0\17\27\1\153\7\27\30\0\1\27\5\0"+
    "\10\27\1\154\21\27\2\0\7\27\1\154\17\27\3\0"+
    "\1\155\24\0\1\27\5\0\23\27\1\156\6\27\2\0"+
    "\21\27\1\156\5\27\30\0\1\27\5\0\24\27\1\157"+
    "\5\27\2\0\22\27\1\157\4\27\61\0\1\160\31\0"+
    "\1\160\35\0\1\27\5\0\13\27\1\161\16\27\2\0"+
    "\12\27\1\161\14\27\30\0\1\27\5\0\10\27\1\162"+
    "\21\27\2\0\7\27\1\162\17\27\3\0\1\163\24\0"+
    "\1\27\5\0\10\27\1\164\21\27\2\0\7\27\1\164"+
    "\17\27\3\0\1\165\24\0\1\27\5\0\10\27\1\166"+
    "\21\27\2\0\7\27\1\166\17\27\3\0\1\167\55\0"+
    "\1\170\31\0\1\170\64\0\1\171\31\0\1\171\55\0"+
    "\1\155\32\0\1\155\22\0\1\155\2\0\14\62\1\127"+
    "\4\62\1\172\77\62\22\0\1\27\5\0\13\27\1\173"+
    "\16\27\2\0\12\27\1\173\14\27\30\0\1\27\5\0"+
    "\1\174\31\27\2\0\27\27\30\0\1\27\5\0\4\27"+
    "\1\175\25\27\2\0\3\27\1\175\23\27\42\0\1\176"+
    "\32\0\1\176\53\0\1\27\5\0\21\27\1\177\10\27"+
    "\2\0\17\27\1\177\7\27\30\0\1\27\5\0\22\27"+
    "\1\200\7\27\2\0\20\27\1\200\6\27\4\0\1\201"+
    "\23\0\1\27\5\0\1\202\7\27\1\203\21\27\2\0"+
    "\7\27\1\203\17\27\3\0\1\204\24\0\1\27\5\0"+
    "\1\27\1\205\30\27\2\0\1\205\26\27\30\0\1\27"+
    "\5\0\27\27\1\206\2\27\2\0\25\27\1\206\1\27"+
    "\30\0\1\27\5\0\4\27\1\207\25\27\2\0\3\27"+
    "\1\207\23\27\42\0\1\210\32\0\1\210\53\0\1\27"+
    "\5\0\22\27\1\211\7\27\2\0\20\27\1\211\6\27"+
    "\4\0\1\212\23\0\1\27\5\0\5\27\1\213\24\27"+
    "\2\0\4\27\1\213\22\27\30\0\1\27\5\0\15\27"+
    "\1\214\14\27\2\0\14\27\1\214\12\27\53\0\1\215"+
    "\32\0\1\215\42\0\1\27\5\0\25\27\1\216\4\27"+
    "\2\0\23\27\1\216\3\27\30\0\1\27\5\0\10\27"+
    "\1\217\21\27\2\0\7\27\1\217\17\27\3\0\1\220"+
    "\24\0\1\27\5\0\23\27\1\221\6\27\2\0\21\27"+
    "\1\221\5\27\61\0\1\222\31\0\1\222\35\0\1\27"+
    "\5\0\24\27\1\223\5\27\2\0\22\27\1\223\4\27"+
    "\30\0\1\27\5\0\4\27\1\224\25\27\2\0\3\27"+
    "\1\224\23\27\62\0\1\225\31\0\1\225\34\0\1\27"+
    "\5\0\16\27\1\226\13\27\2\0\15\27\1\226\11\27"+
    "\30\0\1\27\5\0\3\27\1\227\26\27\2\0\2\27"+
    "\1\227\24\27\41\0\1\230\32\0\1\230\54\0\1\27"+
    "\5\0\13\27\1\231\16\27\2\0\12\27\1\231\14\27"+
    "\51\0\1\232\32\0\1\232\44\0\1\27\5\0\23\27"+
    "\1\233\6\27\2\0\21\27\1\233\5\27\61\0\1\234"+
    "\31\0\1\234\53\0\1\220\32\0\1\220\22\0\1\220"+
    "\24\0\1\27\5\0\12\27\1\235\17\27\2\0\11\27"+
    "\1\235\15\27\5\0\1\236\22\0\1\27\5\0\16\27"+
    "\1\237\13\27\2\0\15\27\1\237\11\27\54\0\1\240"+
    "\32\0\1\240\41\0\1\27\5\0\24\27\1\241\5\27"+
    "\2\0\22\27\1\241\4\27\30\0\1\27\5\0\15\27"+
    "\1\242\14\27\2\0\14\27\1\242\12\27\53\0\1\243"+
    "\32\0\1\243\42\0\1\27\5\0\13\27\1\244\16\27"+
    "\2\0\12\27\1\244\14\27\30\0\1\27\5\0\4\27"+
    "\1\245\25\27\2\0\3\27\1\245\23\27\42\0\1\246"+
    "\32\0\1\246\53\0\1\27\5\0\10\27\1\247\21\27"+
    "\2\0\7\27\1\247\17\27\3\0\1\250\24\0\1\27"+
    "\5\0\1\251\31\27\2\0\27\27\30\0\1\27\5\0"+
    "\15\27\1\252\14\27\2\0\14\27\1\252\12\27\53\0"+
    "\1\253\32\0\1\253\42\0\1\27\5\0\2\27\1\254"+
    "\27\27\2\0\1\27\1\254\25\27\40\0\1\255\32\0"+
    "\1\255\55\0\1\27\5\0\13\27\1\256\16\27\2\0"+
    "\12\27\1\256\14\27\51\0\1\257\32\0\1\257\44\0"+
    "\1\27\5\0\21\27\1\260\10\27\2\0\17\27\1\260"+
    "\7\27\30\0\1\27\5\0\4\27\1\261\25\27\2\0"+
    "\3\27\1\261\23\27\42\0\1\262\32\0\1\262\53\0"+
    "\1\27\5\0\4\27\1\263\25\27\2\0\3\27\1\263"+
    "\23\27\42\0\1\264\32\0\1\264\53\0\1\27\5\0"+
    "\13\27\1\265\16\27\2\0\12\27\1\265\14\27\51\0"+
    "\1\266\32\0\1\266\44\0\1\27\5\0\13\27\1\267"+
    "\16\27\2\0\12\27\1\267\14\27\30\0\1\27\5\0"+
    "\10\27\1\270\21\27\2\0\7\27\1\270\17\27\3\0"+
    "\1\271\42\0\1\271\32\0\1\271\22\0\1\271\24\0"+
    "\1\27\5\0\4\27\1\272\25\27\2\0\3\27\1\272"+
    "\23\27\30\0\1\27\5\0\2\27\1\273\27\27\2\0"+
    "\1\27\1\273\25\27\40\0\1\274\32\0\1\274\55\0"+
    "\1\27\5\0\13\27\1\275\16\27\2\0\12\27\1\275"+
    "\14\27\30\0\1\27\5\0\6\27\1\276\23\27\2\0"+
    "\5\27\1\276\21\27\44\0\1\277\32\0\1\277\51\0"+
    "\1\27\5\0\7\27\1\300\22\27\2\0\6\27\1\300"+
    "\20\27\45\0\1\301\32\0\1\301\50\0\1\27\5\0"+
    "\16\27\1\302\13\27\2\0\15\27\1\302\11\27\54\0"+
    "\1\303\32\0\1\303\41\0\1\27\5\0\4\27\1\304"+
    "\25\27\2\0\3\27\1\304\23\27\30\0\1\27\5\0"+
    "\4\27\1\305\25\27\2\0\3\27\1\305\23\27\42\0"+
    "\1\306\32\0\1\306\53\0\1\27\5\0\23\27\1\307"+
    "\6\27\2\0\21\27\1\307\5\27\30\0\1\27\5\0"+
    "\21\27\1\310\10\27\2\0\17\27\1\310\7\27\57\0"+
    "\1\311\31\0\1\311\37\0\1\27\5\0\1\312\31\27"+
    "\2\0\27\27\36\0\1\313\112\0\1\27\5\0\16\27"+
    "\1\314\13\27\2\0\15\27\1\314\11\27\30\0\1\27"+
    "\5\0\27\27\1\315\1\316\1\27\2\0\25\27\1\315"+
    "\1\316\65\0\1\317\1\320\30\0\1\317\1\320\30\0"+
    "\1\27\5\0\22\27\1\321\7\27\2\0\20\27\1\321"+
    "\6\27\4\0\1\322\23\0\1\27\5\0\6\27\1\323"+
    "\23\27\2\0\5\27\1\323\21\27\44\0\1\324\32\0"+
    "\1\324\51\0\1\27\5\0\1\27\1\325\15\27\1\326"+
    "\12\27\2\0\1\325\15\27\1\326\10\27\37\0\1\327"+
    "\15\0\1\330\14\0\1\327\15\0\1\330\40\0\1\27"+
    "\5\0\21\27\1\331\10\27\2\0\17\27\1\331\7\27"+
    "\30\0\1\27\5\0\13\27\1\332\16\27\2\0\12\27"+
    "\1\332\14\27\51\0\1\333\32\0\1\333\44\0\1\27"+
    "\5\0\1\334\31\27\2\0\27\27\30\0\1\27\5\0"+
    "\10\27\1\335\21\27\2\0\7\27\1\335\17\27\3\0"+
    "\1\336\32\0\1\337\130\0\1\336\32\0\1\336\22\0"+
    "\1\336\24\0\1\27\5\0\16\27\1\340\13\27\2\0"+
    "\15\27\1\340\11\27\54\0\1\341\32\0\1\341\41\0"+
    "\1\27\5\0\21\27\1\342\10\27\2\0\17\27\1\342"+
    "\7\27\30\0\1\27\5\0\4\27\1\343\25\27\2\0"+
    "\3\27\1\343\23\27\42\0\1\344\32\0\1\344\102\0"+
    "\1\345\31\0\1\345\37\0\1\27\5\0\1\27\1\346"+
    "\30\27\2\0\1\346\26\27\37\0\1\347\32\0\1\347"+
    "\56\0\1\27\5\0\21\27\1\350\10\27\2\0\17\27"+
    "\1\350\7\27\57\0\1\351\31\0\1\351\37\0\1\27"+
    "\5\0\1\352\31\27\2\0\27\27\36\0\1\353\112\0"+
    "\1\27\5\0\1\354\31\27\2\0\27\27\36\0\1\355"+
    "\112\0\1\27\5\0\13\27\1\356\16\27\2\0\12\27"+
    "\1\356\14\27\51\0\1\357\32\0\1\357\44\0\1\27"+
    "\5\0\22\27\1\360\7\27\2\0\20\27\1\360\6\27"+
    "\4\0\1\361\53\0\1\361\31\0\1\361\12\0\1\361"+
    "\23\0\1\27\5\0\4\27\1\362\25\27\2\0\3\27"+
    "\1\362\23\27\42\0\1\363\32\0\1\363\53\0\1\27"+
    "\5\0\22\27\1\364\7\27\2\0\20\27\1\364\6\27"+
    "\4\0\1\365\53\0\1\365\31\0\1\365\12\0\1\365"+
    "\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14013];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\3\11\1\1\3\11"+
    "\2\1\2\11\21\1\3\11\1\1\1\11\2\1\1\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\1\1\0\3\11"+
    "\24\1\1\0\4\1\2\11\3\0\1\11\1\0\4\1"+
    "\1\0\6\1\1\0\5\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\3\1\1\11\2\1\1\0\2\1\1\0"+
    "\3\1\1\11\1\1\1\0\2\1\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\11\1\1\1\11"+
    "\4\1\1\11\2\1\1\0\1\1\1\0\3\1\2\11"+
    "\1\1\1\11\1\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { func.Funcion.tabla_T_errores_stat(yytext(), "ERROR LEXICO", yyline, yycolumn); 
                  System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 64: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 65: break;
          case 3:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNONOT", yyline, yycolumn); 
                    return new Symbol(sym.SIGNONOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 4:
            { func.Funcion.tabla_T_stat(yytext(), "DOLAR", yyline, yycolumn); 
                    return new Symbol(sym.DOLAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 5:
            { func.Funcion.tabla_T_stat(yytext(), "PARENTESISABRE", yyline, yycolumn); 
                    return new Symbol(sym.PARENTESISABRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 6:
            { func.Funcion.tabla_T_stat(yytext(), "PARENTESISCIERRA", yyline, yycolumn); 
                    return new Symbol(sym.PARENTESISCIERRA, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 7:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOPOR", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOPOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 8:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOMAS", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOMAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 9:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOCOMA", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOCOMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 10:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOMENOS", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOMENOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 11:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOPUNTO", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOPUNTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 12:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNODIVISION", yyline, yycolumn); 
                    return new Symbol(sym.SIGNODIVISION, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 13:
            { func.Funcion.tabla_T_stat(yytext(), "ENTERO", yyline, yycolumn); 
                    return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 14:
            { func.Funcion.tabla_T_stat(yytext(), "DOSPUNTOS", yyline, yycolumn); 
                    return new Symbol(sym.DOSPUNTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 15:
            { func.Funcion.tabla_T_stat(yytext(), "PUNTOYCOMA", yyline, yycolumn); 
                    return new Symbol(sym.PUNTOYCOMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 16:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOMENOR", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOMENOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 17:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOIGUAL", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 18:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOMAYOR", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOMAYOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 19:
            { func.Funcion.tabla_T_stat(yytext(), "ID", yyline, yycolumn); 
                    return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 20:
            { func.Funcion.tabla_T_stat(yytext(), "CORCHETEABRE", yyline, yycolumn); 
                    return new Symbol(sym.CORCHETEABRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 21:
            { func.Funcion.tabla_T_stat(yytext(), "CORCHETECIERRA", yyline, yycolumn); 
                    return new Symbol(sym.CORCHETECIERRA, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 22:
            { func.Funcion.tabla_T_stat(yytext(), "LLAVEABRE", yyline, yycolumn); 
                    return new Symbol(sym.LLAVEABRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 23:
            { func.Funcion.tabla_T_stat(yytext(), "LLAVECIERRA", yyline, yycolumn); 
                    return new Symbol(sym.LLAVECIERRA, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 24:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNODIFERENTE", yyline, yycolumn); 
                    return new Symbol(sym.SIGNODIFERENTE, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 25:
            { func.Funcion.tabla_T_stat(yytext(), "CADENA", yyline, yycolumn); 
                    return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 26:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOAND", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOAND, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 27:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOINCREMENTO", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOINCREMENTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 28:
            { 
            }
          // fall through
          case 91: break;
          case 29:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOMENORIGUAL", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOMENORIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 30:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOIGUALIGUAL", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOIGUALIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 31:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOMAYORIGUAL", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOMAYORIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 32:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_DO", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_DO, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 33:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_IF", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_IF, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 34:
            { func.Funcion.tabla_T_stat(yytext(), "SIGNOOR", yyline, yycolumn); 
                    return new Symbol(sym.SIGNOOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 35:
            { func.Funcion.tabla_T_stat(yytext(), "CHARR", yyline, yycolumn); 
                    return new Symbol(sym.CHARR, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 36:
            { func.Funcion.tabla_T_stat(yytext(), "DECIMALES", yyline, yycolumn); 
                    return new Symbol(sym.DECIMALES, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 37:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_FOR", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_FOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 38:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_INT", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_INT, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 39:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_BOOL", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_BOOL, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 40:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_CASE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_CASE, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 41:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_CHAR", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_CHAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 42:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_EJEX", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_EJEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 43:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_ELSE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_ELSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          case 44:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_MAIN", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_MAIN, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 45:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_TRUE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_TRUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 46:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_VOID", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_VOID, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 47:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_BREAK", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_BREAK, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          case 48:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_FALSE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_FALSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 111: break;
          case 49:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_WHILE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_WHILE, yycolumn, yyline, yytext());
            }
          // fall through
          case 112: break;
          case 50:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_WRITE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_WRITE, yycolumn, yyline, yytext());
            }
          // fall through
          case 113: break;
          case 51:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_DOUBLE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_DOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 114: break;
          case 52:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_STRING", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_STRING, yycolumn, yyline, yytext());
            }
          // fall through
          case 115: break;
          case 53:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_SWITCH", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_SWITCH, yycolumn, yyline, yytext());
            }
          // fall through
          case 116: break;
          case 54:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_TITULO", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_TITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 117: break;
          case 55:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_CONSOLE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_CONSOLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 118: break;
          case 56:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_DEFAULT", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_DEFAULT, yycolumn, yyline, yytext());
            }
          // fall through
          case 119: break;
          case 57:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_TITULOX", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_TITULOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 120: break;
          case 58:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_TITULOY", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_TITULOY, yycolumn, yyline, yytext());
            }
          // fall through
          case 121: break;
          case 59:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_VALORES", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_VALORES, yycolumn, yyline, yytext());
            }
          // fall through
          case 122: break;
          case 60:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_NEWVALOR", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_NEWVALOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 123: break;
          case 61:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_GRAFICARPIE", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_GRAFICARPIE, yycolumn, yyline, yytext());
            }
          // fall through
          case 124: break;
          case 62:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_GRAFICARBARRAS", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_GRAFICARBARRAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 125: break;
          case 63:
            { func.Funcion.tabla_T_stat(yytext(), "RESERVADA_DEFINIRG", yyline, yycolumn); 
                    return new Symbol(sym.RESERVADA_DEFINIRG, yycolumn, yyline, yytext());
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
