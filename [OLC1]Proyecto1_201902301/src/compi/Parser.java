
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\011\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\007\011\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\037\012\000\002\040\004\000\002\040\003" +
    "\000\002\041\006\000\002\042\005\000\002\036\015\000" +
    "\002\017\003\000\002\017\003\000\002\013\011\000\002" +
    "\013\011\000\002\013\011\000\002\020\004\000\002\020" +
    "\003\000\002\015\004\000\002\014\006\000\002\025\004" +
    "\000\002\025\003\000\002\026\007\000\002\026\013\000" +
    "\002\026\013\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\033\003\000\002\033\005\000\002\035" +
    "\003\000\002\035\005\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\043\004\000\002\043\003\000" +
    "\002\044\007\000\002\044\013\000\002\044\013\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\003\000\002\046\005\000\002\032\012\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\012\011\000" +
    "\002\023\013\000\002\023\011\000\002\011\011\000\002" +
    "\016\003\000\002\016\013\000\002\016\007\000\002\004" +
    "\006\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\021\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\010\000" +
    "\002\006\012\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\004\042\004\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\005\011\001\002\000" +
    "\004\007\012\001\002\000\040\003\036\033\040\034\023" +
    "\035\044\036\027\041\025\042\033\044\034\045\020\051" +
    "\024\052\032\053\013\064\022\072\041\073\017\001\002" +
    "\000\004\006\u012b\001\002\000\046\003\ufff7\010\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7\042\ufff7\044\ufff7" +
    "\045\ufff7\051\ufff7\052\ufff7\053\ufff7\064\ufff7\072\ufff7\073" +
    "\ufff7\075\ufff7\076\ufff7\001\002\000\046\003\ufffb\010\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\041\ufffb\042\ufffb\044" +
    "\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\064\ufffb\072\ufffb" +
    "\073\ufffb\075\ufffb\076\ufffb\001\002\000\046\003\ufffe\010" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\041\ufffe\042\ufffe" +
    "\044\ufffe\045\ufffe\051\ufffe\052\ufffe\053\ufffe\064\ufffe\072" +
    "\ufffe\073\ufffe\075\ufffe\076\ufffe\001\002\000\004\004\u011b" +
    "\001\002\000\004\016\u0115\001\002\000\046\003\ufffd\010" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\041\ufffd\042\ufffd" +
    "\044\ufffd\045\ufffd\051\ufffd\052\ufffd\053\ufffd\064\ufffd\072" +
    "\ufffd\073\ufffd\075\ufffd\076\ufffd\001\002\000\004\026\125" +
    "\001\002\000\004\064\u0110\001\002\000\004\004\u010a\001" +
    "\002\000\004\064\u0105\001\002\000\042\003\036\010\u0104" +
    "\033\040\034\023\035\044\036\027\041\025\042\033\044" +
    "\034\045\020\051\024\052\032\053\013\064\022\072\041" +
    "\073\017\001\002\000\004\064\377\001\002\000\046\003" +
    "\ufff3\010\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041\ufff3" +
    "\042\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3\053\ufff3\064" +
    "\ufff3\072\ufff3\073\ufff3\075\ufff3\076\ufff3\001\002\000\046" +
    "\003\ufff5\010\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\041" +
    "\ufff5\042\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\064\ufff5\072\ufff5\073\ufff5\075\ufff5\076\ufff5\001\002\000" +
    "\004\004\363\001\002\000\010\050\214\055\213\077\212" +
    "\001\002\000\004\004\170\001\002\000\046\003\ufff2\010" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\041\ufff2\042\ufff2" +
    "\044\ufff2\045\ufff2\051\ufff2\052\ufff2\053\ufff2\064\ufff2\072" +
    "\ufff2\073\ufff2\075\ufff2\076\ufff2\001\002\000\004\006\167" +
    "\001\002\000\046\003\ufffa\010\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\041\ufffa\042\ufffa\044\ufffa\045\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\064\ufffa\072\ufffa\073\ufffa\075\ufffa\076" +
    "\ufffa\001\002\000\004\064\162\001\002\000\004\007\147" +
    "\001\002\000\046\003\ufff4\010\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\041\ufff4\042\ufff4\044\ufff4\045\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\064\ufff4\072\ufff4\073\ufff4\075\ufff4\076" +
    "\ufff4\001\002\000\046\003\ufff6\010\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\041\ufff6\042\ufff6\044\ufff6\045\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\064\ufff6\072\ufff6\073\ufff6\075\ufff6" +
    "\076\ufff6\001\002\000\004\064\045\001\002\000\006\006" +
    "\046\026\047\001\002\000\070\003\uffb6\010\uffb6\021\uffb6" +
    "\025\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067" +
    "\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\001\002\000\040" +
    "\021\054\025\062\032\061\033\040\034\023\035\044\036" +
    "\027\037\051\040\060\041\025\063\052\064\057\065\063" +
    "\066\053\067\050\001\002\000\044\005\uffaf\006\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf\031" +
    "\uffaf\074\uffaf\001\002\000\044\005\uffad\006\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad\031\uffad" +
    "\074\uffad\001\002\000\044\005\uffb2\006\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\031\uffb2\074" +
    "\uffb2\001\002\000\044\005\uffb1\006\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\031\uffb1\074\uffb1" +
    "\001\002\000\040\021\054\025\062\032\061\033\040\034" +
    "\023\035\044\036\027\037\051\040\060\041\025\063\052" +
    "\064\057\065\063\066\053\067\050\001\002\000\040\021" +
    "\054\025\062\032\061\033\040\034\023\035\044\036\027" +
    "\037\051\040\060\041\025\063\052\064\057\065\063\066" +
    "\053\067\050\001\002\000\036\006\130\011\102\012\074" +
    "\013\076\014\067\015\100\017\072\020\075\021\073\022" +
    "\077\023\066\024\065\025\101\030\070\001\002\000\046" +
    "\005\uffae\006\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\125\030\uffae\031\uffae\074\uffae\001\002\000" +
    "\044\005\uffac\006\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\030\uffac\031\uffac\074\uffac\001\002\000\004" +
    "\007\116\001\002\000\040\021\054\025\062\032\061\033" +
    "\040\034\023\035\044\036\027\037\051\040\060\041\025" +
    "\063\052\064\057\065\063\066\053\067\050\001\002\000" +
    "\044\005\uffb0\006\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\030\uffb0\031\uffb0\074\uffb0\001\002\000\044" +
    "\005\uffa7\006\uffa7\011\102\012\074\013\076\014\067\015" +
    "\100\017\072\020\075\021\073\022\077\023\uffa7\024\uffa7" +
    "\025\101\030\070\031\uffa7\074\uffa7\001\002\000\040\021" +
    "\uff9b\025\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\063\uff9b\064\uff9b\065\uff9b\066" +
    "\uff9b\067\uff9b\001\002\000\040\021\uff9c\025\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\001\002" +
    "\000\040\021\054\025\062\032\061\033\040\034\023\035" +
    "\044\036\027\037\051\040\060\041\025\063\052\064\057" +
    "\065\063\066\053\067\050\001\002\000\040\021\054\025" +
    "\062\032\061\033\040\034\023\035\044\036\027\037\051" +
    "\040\060\041\025\063\052\064\057\065\063\066\053\067" +
    "\050\001\002\000\040\021\054\025\062\032\061\033\040" +
    "\034\023\035\044\036\027\037\051\040\060\041\025\063" +
    "\052\064\057\065\063\066\053\067\050\001\002\000\040" +
    "\021\054\025\062\032\061\033\040\034\023\035\044\036" +
    "\027\037\051\040\060\041\025\063\052\064\057\065\063" +
    "\066\053\067\050\001\002\000\040\021\054\025\062\032" +
    "\061\033\040\034\023\035\044\036\027\037\051\040\060" +
    "\041\025\063\052\064\057\065\063\066\053\067\050\001" +
    "\002\000\040\021\054\025\062\032\061\033\040\034\023" +
    "\035\044\036\027\037\051\040\060\041\025\063\052\064" +
    "\057\065\063\066\053\067\050\001\002\000\040\021\054" +
    "\025\062\032\061\033\040\034\023\035\044\036\027\037" +
    "\051\040\060\041\025\063\052\064\057\065\063\066\053" +
    "\067\050\001\002\000\040\021\054\025\062\032\061\033" +
    "\040\034\023\035\044\036\027\037\051\040\060\041\025" +
    "\063\052\064\057\065\063\066\053\067\050\001\002\000" +
    "\040\021\054\025\062\032\061\033\040\034\023\035\044" +
    "\036\027\037\051\040\060\041\025\063\052\064\057\065" +
    "\063\066\053\067\050\001\002\000\040\021\054\025\062" +
    "\032\061\033\040\034\023\035\044\036\027\037\051\040" +
    "\060\041\025\063\052\064\057\065\063\066\053\067\050" +
    "\001\002\000\040\021\uff9a\025\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\001\002\000\040\021" +
    "\054\025\062\032\061\033\040\034\023\035\044\036\027" +
    "\037\051\040\060\041\025\063\052\064\057\065\063\066" +
    "\053\067\050\001\002\000\044\005\uffa4\006\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\017\072\020\075\021" +
    "\073\022\077\023\uffa4\024\uffa4\025\uffa4\030\uffa4\031\uffa4" +
    "\074\uffa4\001\002\000\044\005\uffa0\006\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\017\072\020\075\021\073" +
    "\022\077\023\uffa0\024\uffa0\025\uffa0\030\uffa0\031\uffa0\074" +
    "\uffa0\001\002\000\044\005\uffa8\006\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\017\uffa8\020\uffa8\021\073\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\031\uffa8\074\uffa8" +
    "\001\002\000\044\005\uffa3\006\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\017\072\020\075\021\073\022\077" +
    "\023\uffa3\024\uffa3\025\uffa3\030\uffa3\031\uffa3\074\uffa3\001" +
    "\002\000\044\005\uffab\006\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\017\072\020\uffab\021\073\022\077\023" +
    "\uffab\024\uffab\025\uffab\030\uffab\031\uffab\074\uffab\001\002" +
    "\000\044\005\uffa2\006\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\017\072\020\075\021\073\022\077\023\uffa2" +
    "\024\uffa2\025\uffa2\030\uffa2\031\uffa2\074\uffa2\001\002\000" +
    "\044\005\uffaa\006\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\017\uffaa\020\uffaa\021\073\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\030\uffaa\031\uffaa\074\uffaa\001\002\000\044" +
    "\005\uffa9\006\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\017\uffa9\020\uffa9\021\073\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\030\uffa9\031\uffa9\074\uffa9\001\002\000\044\005" +
    "\uffa5\006\uffa5\011\102\012\074\013\076\014\067\015\100" +
    "\017\072\020\075\021\073\022\077\023\066\024\065\025" +
    "\101\030\070\031\uffa5\074\uffa5\001\002\000\044\005\uff9f" +
    "\006\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\017" +
    "\072\020\075\021\073\022\077\023\uff9f\024\uff9f\025\uff9f" +
    "\030\uff9f\031\uff9f\074\uff9f\001\002\000\044\005\uffa1\006" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\017\072" +
    "\020\075\021\073\022\077\023\uffa1\024\uffa1\025\uffa1\030" +
    "\uffa1\031\uffa1\074\uffa1\001\002\000\004\054\117\001\002" +
    "\000\004\027\120\001\002\000\004\067\121\001\002\000" +
    "\004\027\122\001\002\000\004\067\123\001\002\000\004" +
    "\010\124\001\002\000\044\005\uff9d\006\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\030\uff9d\031\uff9d\074" +
    "\uff9d\001\002\000\040\021\054\025\062\032\061\033\040" +
    "\034\023\035\044\036\027\037\051\040\060\041\025\063" +
    "\052\064\057\065\063\066\053\067\050\001\002\000\036" +
    "\006\127\011\102\012\074\013\076\014\067\015\100\017" +
    "\072\020\075\021\073\022\077\023\066\024\065\025\101" +
    "\030\070\001\002\000\070\003\uffbe\010\uffbe\021\uffbe\025" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\072\uffbe\073\uffbe\075\uffbe\076\uffbe\001\002\000\070\003" +
    "\uffbb\010\uffbb\021\uffbb\025\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044" +
    "\uffbb\045\uffbb\051\uffbb\052\uffbb\053\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\072\uffbb\073\uffbb\075\uffbb\076" +
    "\uffbb\001\002\000\034\011\140\012\135\013\136\014\132" +
    "\015\137\017\072\020\075\021\073\022\077\023\066\024" +
    "\065\025\101\030\133\001\002\000\040\021\054\025\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\001\002\000\040\021\054\025\uff95\032\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\001\002\000\040\021" +
    "\054\025\062\032\061\033\040\034\023\035\044\036\027" +
    "\037\051\040\060\041\025\063\052\064\057\065\063\066" +
    "\053\067\050\001\002\000\040\021\054\025\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\001\002" +
    "\000\040\021\054\025\uff99\032\uff99\033\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\063\uff99\064\uff99" +
    "\065\uff99\066\uff99\067\uff99\001\002\000\040\021\054\025" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\001\002\000\040\021\054\025\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\001\002\000\036" +
    "\006\142\011\102\012\074\013\076\014\067\015\100\017" +
    "\072\020\075\021\073\022\077\023\066\024\065\025\101" +
    "\030\070\001\002\000\040\021\054\025\062\032\061\033" +
    "\040\034\023\035\044\036\027\037\051\040\060\041\025" +
    "\063\052\064\057\065\063\066\053\067\050\001\002\000" +
    "\036\011\102\012\074\013\076\014\067\015\100\017\072" +
    "\020\075\021\073\022\077\023\066\024\065\025\101\030" +
    "\070\031\145\001\002\000\044\005\uff9e\006\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\030\uff9e\031\uff9e" +
    "\074\uff9e\001\002\000\044\005\uffb3\006\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\031\uffb3\074" +
    "\uffb3\001\002\000\044\005\uffa6\006\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6\021\073\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\030\uffa6\031\uffa6\074\uffa6" +
    "\001\002\000\040\003\036\033\040\034\023\035\044\036" +
    "\027\041\025\042\033\044\034\045\020\051\024\052\032" +
    "\053\013\064\022\072\041\073\017\001\002\000\042\003" +
    "\036\010\152\033\040\034\023\035\044\036\027\041\025" +
    "\042\033\044\034\045\020\051\024\052\032\053\013\064" +
    "\022\072\041\073\017\001\002\000\046\003\uffff\010\uffff" +
    "\033\uffff\034\uffff\035\uffff\036\uffff\041\uffff\042\uffff\044" +
    "\uffff\045\uffff\051\uffff\052\uffff\053\uffff\064\uffff\072\uffff" +
    "\073\uffff\075\uffff\076\uffff\001\002\000\004\052\153\001" +
    "\002\000\004\004\154\001\002\000\040\021\054\025\062" +
    "\032\061\033\040\034\023\035\044\036\027\037\051\040" +
    "\060\041\025\063\052\064\057\065\063\066\053\067\050" +
    "\001\002\000\034\011\140\012\135\013\136\014\132\015" +
    "\137\017\072\020\075\021\073\022\077\023\066\024\065" +
    "\025\101\030\133\001\002\000\040\021\054\025\062\032" +
    "\061\033\040\034\023\035\044\036\027\037\051\040\060" +
    "\041\025\063\052\064\057\065\063\066\053\067\050\001" +
    "\002\000\036\005\160\011\102\012\074\013\076\014\067" +
    "\015\100\017\072\020\075\021\073\022\077\023\066\024" +
    "\065\025\101\030\070\001\002\000\004\006\161\001\002" +
    "\000\046\003\uffec\010\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\041\uffec\042\uffec\044\uffec\045\uffec\051\uffec\052\uffec" +
    "\053\uffec\064\uffec\072\uffec\073\uffec\075\uffec\076\uffec\001" +
    "\002\000\006\006\163\026\164\001\002\000\070\003\uffb8" +
    "\010\uffb8\021\uffb8\025\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8" +
    "\045\uffb8\051\uffb8\052\uffb8\053\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\072\uffb8\073\uffb8\075\uffb8\076\uffb8" +
    "\001\002\000\040\021\054\025\062\032\061\033\040\034" +
    "\023\035\044\036\027\037\051\040\060\041\025\063\052" +
    "\064\057\065\063\066\053\067\050\001\002\000\036\006" +
    "\166\011\102\012\074\013\076\014\067\015\100\017\072" +
    "\020\075\021\073\022\077\023\066\024\065\025\101\030" +
    "\070\001\002\000\070\003\uffbd\010\uffbd\021\uffbd\025\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\072" +
    "\uffbd\073\uffbd\075\uffbd\076\uffbd\001\002\000\046\003\ufffc" +
    "\010\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\041\ufffc\042" +
    "\ufffc\044\ufffc\045\ufffc\051\ufffc\052\ufffc\053\ufffc\064\ufffc" +
    "\072\ufffc\073\ufffc\075\ufffc\076\ufffc\001\002\000\040\021" +
    "\054\025\062\032\061\033\040\034\023\035\044\036\027" +
    "\037\051\040\060\041\025\063\052\064\057\065\063\066" +
    "\053\067\050\001\002\000\036\005\172\011\102\012\074" +
    "\013\076\014\067\015\100\017\072\020\075\021\073\022" +
    "\077\023\066\024\065\025\101\030\070\001\002\000\004" +
    "\007\173\001\002\000\040\003\036\033\040\034\023\035" +
    "\044\036\027\041\025\042\033\044\034\045\020\051\024" +
    "\052\032\053\013\064\022\072\041\073\017\001\002\000" +
    "\042\003\036\010\176\033\040\034\023\035\044\036\027" +
    "\041\025\042\033\044\034\045\020\051\024\052\032\053" +
    "\013\064\022\072\041\073\017\001\002\000\046\003\uffc2" +
    "\010\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\051\uffc2\052\uffc2\053\uffc2\064\uffc2" +
    "\072\uffc2\073\uffc2\075\uffc2\076\uffc2\001\002\000\050\003" +
    "\uffc1\010\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1" +
    "\042\uffc1\044\uffc1\045\uffc1\047\177\051\uffc1\052\uffc1\053" +
    "\uffc1\064\uffc1\072\uffc1\073\uffc1\075\uffc1\076\uffc1\001\002" +
    "\000\006\007\200\044\201\001\002\000\040\003\036\033" +
    "\040\034\023\035\044\036\027\041\025\042\033\044\034" +
    "\045\020\051\024\052\032\053\013\064\022\072\041\073" +
    "\017\001\002\000\004\004\202\001\002\000\040\021\054" +
    "\025\062\032\061\033\040\034\023\035\044\036\027\037" +
    "\051\040\060\041\025\063\052\064\057\065\063\066\053" +
    "\067\050\001\002\000\036\005\204\011\102\012\074\013" +
    "\076\014\067\015\100\017\072\020\075\021\073\022\077" +
    "\023\066\024\065\025\101\030\070\001\002\000\004\007" +
    "\205\001\002\000\040\003\036\033\040\034\023\035\044" +
    "\036\027\041\025\042\033\044\034\045\020\051\024\052" +
    "\032\053\013\064\022\072\041\073\017\001\002\000\042" +
    "\003\036\010\176\033\040\034\023\035\044\036\027\041" +
    "\025\042\033\044\034\045\020\051\024\052\032\053\013" +
    "\064\022\072\041\073\017\001\002\000\046\003\uffc0\010" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0" +
    "\044\uffc0\045\uffc0\051\uffc0\052\uffc0\053\uffc0\064\uffc0\072" +
    "\uffc0\073\uffc0\075\uffc0\076\uffc0\001\002\000\042\003\036" +
    "\010\211\033\040\034\023\035\044\036\027\041\025\042" +
    "\033\044\034\045\020\051\024\052\032\053\013\064\022" +
    "\072\041\073\017\001\002\000\046\003\uffbf\010\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\044\uffbf" +
    "\045\uffbf\051\uffbf\052\uffbf\053\uffbf\064\uffbf\072\uffbf\073" +
    "\uffbf\075\uffbf\076\uffbf\001\002\000\004\004\320\001\002" +
    "\000\004\004\234\001\002\000\004\004\215\001\002\000" +
    "\004\005\216\001\002\000\004\007\217\001\002\000\006" +
    "\034\224\041\223\001\002\000\010\010\uffe5\034\uffe5\041" +
    "\uffe5\001\002\000\010\010\233\034\224\041\223\001\002" +
    "\000\004\064\227\001\002\000\004\064\uffeb\001\002\000" +
    "\004\064\uffea\001\002\000\004\006\226\001\002\000\010" +
    "\010\uffe4\034\uffe4\041\uffe4\001\002\000\004\026\230\001" +
    "\002\000\040\021\054\025\062\032\061\033\040\034\023" +
    "\035\044\036\027\037\051\040\060\041\025\063\052\064" +
    "\057\065\063\066\053\067\050\001\002\000\036\006\uffe3" +
    "\011\102\012\074\013\076\014\067\015\100\017\072\020" +
    "\075\021\073\022\077\023\066\024\065\025\101\030\070" +
    "\001\002\000\010\010\uffe6\034\uffe6\041\uffe6\001\002\000" +
    "\046\003\uffe9\010\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\041\uffe9\042\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\064\uffe9\072\uffe9\073\uffe9\075\uffe9\076\uffe9\001\002" +
    "\000\004\005\235\001\002\000\004\007\236\001\002\000" +
    "\006\034\242\041\241\001\002\000\010\010\317\034\242" +
    "\041\241\001\002\000\010\010\uffe1\034\uffe1\041\uffe1\001" +
    "\002\000\012\056\272\060\275\061\274\062\273\001\002" +
    "\000\004\056\243\001\002\000\004\057\244\001\002\000" +
    "\004\070\245\001\002\000\004\026\246\001\002\000\004" +
    "\007\247\001\002\000\010\032\251\064\250\065\254\001" +
    "\002\000\006\010\uffd5\027\uffd5\001\002\000\004\007\262" +
    "\001\002\000\006\010\uffd4\027\uffd4\001\002\000\004\010" +
    "\260\001\002\000\006\010\uffd6\027\uffd6\001\002\000\006" +
    "\010\uffd8\027\256\001\002\000\010\032\251\064\250\065" +
    "\254\001\002\000\004\010\uffd7\001\002\000\004\006\261" +
    "\001\002\000\010\010\uffde\034\uffde\041\uffde\001\002\000" +
    "\004\054\263\001\002\000\004\027\264\001\002\000\004" +
    "\067\265\001\002\000\004\027\266\001\002\000\004\067" +
    "\267\001\002\000\004\010\270\001\002\000\010\006\uffc9" +
    "\010\uffc9\027\uffc9\001\002\000\004\026\313\001\002\000" +
    "\004\057\276\001\002\000\004\026\uffc8\001\002\000\004" +
    "\026\uffc6\001\002\000\004\026\uffc7\001\002\000\004\071" +
    "\277\001\002\000\004\026\300\001\002\000\004\007\301" +
    "\001\002\000\010\032\251\064\302\067\306\001\002\000" +
    "\010\006\uffdc\010\uffdc\027\uffdc\001\002\000\004\010\311" +
    "\001\002\000\010\006\uffdb\010\uffdb\027\uffdb\001\002\000" +
    "\006\010\uffda\027\307\001\002\000\010\006\uffdd\010\uffdd" +
    "\027\uffdd\001\002\000\010\032\251\064\302\067\306\001" +
    "\002\000\004\010\uffd9\001\002\000\004\006\312\001\002" +
    "\000\010\010\uffdf\034\uffdf\041\uffdf\001\002\000\010\032" +
    "\251\064\302\067\306\001\002\000\004\006\315\001\002" +
    "\000\010\010\uffe0\034\uffe0\041\uffe0\001\002\000\010\010" +
    "\uffe2\034\uffe2\041\uffe2\001\002\000\046\003\uffe8\010\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\041\uffe8\042\uffe8\044" +
    "\uffe8\045\uffe8\051\uffe8\052\uffe8\053\uffe8\064\uffe8\072\uffe8" +
    "\073\uffe8\075\uffe8\076\uffe8\001\002\000\004\005\321\001" +
    "\002\000\004\007\322\001\002\000\006\034\325\041\324" +
    "\001\002\000\010\010\uffd2\034\uffd2\041\uffd2\001\002\000" +
    "\006\056\341\062\342\001\002\000\004\056\331\001\002" +
    "\000\010\010\330\034\325\041\324\001\002\000\010\010" +
    "\uffd3\034\uffd3\041\uffd3\001\002\000\046\003\uffe7\010\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\041\uffe7\042\uffe7\044" +
    "\uffe7\045\uffe7\051\uffe7\052\uffe7\053\uffe7\064\uffe7\072\uffe7" +
    "\073\uffe7\075\uffe7\076\uffe7\001\002\000\004\057\332\001" +
    "\002\000\004\070\333\001\002\000\004\026\334\001\002" +
    "\000\004\007\335\001\002\000\010\032\251\064\250\065" +
    "\254\001\002\000\004\010\337\001\002\000\004\006\340" +
    "\001\002\000\010\010\uffcf\034\uffcf\041\uffcf\001\002\000" +
    "\004\057\351\001\002\000\004\026\343\001\002\000\010" +
    "\032\251\064\344\067\347\001\002\000\010\006\uffcd\010" +
    "\uffcd\027\uffcd\001\002\000\010\006\uffcc\010\uffcc\027\uffcc" +
    "\001\002\000\004\006\350\001\002\000\010\006\uffce\010" +
    "\uffce\027\uffce\001\002\000\010\010\uffd1\034\uffd1\041\uffd1" +
    "\001\002\000\004\071\352\001\002\000\004\026\353\001" +
    "\002\000\004\007\354\001\002\000\010\032\251\064\344" +
    "\067\347\001\002\000\004\010\361\001\002\000\006\010" +
    "\uffcb\027\357\001\002\000\010\032\251\064\344\067\347" +
    "\001\002\000\004\010\uffca\001\002\000\004\006\362\001" +
    "\002\000\010\010\uffd0\034\uffd0\041\uffd0\001\002\000\040" +
    "\021\054\025\062\032\061\033\040\034\023\035\044\036" +
    "\027\037\051\040\060\041\025\063\052\064\057\065\063" +
    "\066\053\067\050\001\002\000\036\005\365\011\140\012" +
    "\135\013\136\014\132\015\137\017\072\020\075\021\073" +
    "\022\077\023\066\024\065\025\101\030\133\001\002\000" +
    "\004\007\374\001\002\000\040\021\054\025\062\032\061" +
    "\033\040\034\023\035\044\036\027\037\051\040\060\041" +
    "\025\063\052\064\057\065\063\066\053\067\050\001\002" +
    "\000\036\005\370\011\102\012\074\013\076\014\067\015" +
    "\100\017\072\020\075\021\073\022\077\023\066\024\065" +
    "\025\101\030\070\001\002\000\004\007\371\001\002\000" +
    "\040\003\036\033\040\034\023\035\044\036\027\041\025" +
    "\042\033\044\034\045\020\051\024\052\032\053\013\064" +
    "\022\072\041\073\017\001\002\000\042\003\036\010\373" +
    "\033\040\034\023\035\044\036\027\041\025\042\033\044" +
    "\034\045\020\051\024\052\032\053\013\064\022\072\041" +
    "\073\017\001\002\000\046\003\uffc4\010\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\064\uffc4\072\uffc4\073\uffc4\075" +
    "\uffc4\076\uffc4\001\002\000\040\003\036\033\040\034\023" +
    "\035\044\036\027\041\025\042\033\044\034\045\020\051" +
    "\024\052\032\053\013\064\022\072\041\073\017\001\002" +
    "\000\042\003\036\010\376\033\040\034\023\035\044\036" +
    "\027\041\025\042\033\044\034\045\020\051\024\052\032" +
    "\053\013\064\022\072\041\073\017\001\002\000\046\003" +
    "\uffc3\010\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3" +
    "\042\uffc3\044\uffc3\045\uffc3\051\uffc3\052\uffc3\053\uffc3\064" +
    "\uffc3\072\uffc3\073\uffc3\075\uffc3\076\uffc3\001\002\000\006" +
    "\006\u0100\026\u0101\001\002\000\070\003\uffb5\010\uffb5\021" +
    "\uffb5\025\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\072\uffb5\073\uffb5\075\uffb5\076\uffb5\001\002\000" +
    "\040\021\054\025\062\032\061\033\040\034\023\035\044" +
    "\036\027\037\051\040\060\041\025\063\052\064\057\065" +
    "\063\066\053\067\050\001\002\000\036\006\u0103\011\102" +
    "\012\074\013\076\014\067\015\100\017\072\020\075\021" +
    "\073\022\077\023\066\024\065\025\101\030\070\001\002" +
    "\000\070\003\uffba\010\uffba\021\uffba\025\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\044\uffba\045\uffba\051\uffba\052\uffba\053\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\072\uffba\073\uffba" +
    "\075\uffba\076\uffba\001\002\000\004\002\000\001\002\000" +
    "\006\006\u0106\026\u0107\001\002\000\070\003\uffb4\010\uffb4" +
    "\021\uffb4\025\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\045\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\063\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\067\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4\001\002" +
    "\000\040\021\054\025\062\032\061\033\040\034\023\035" +
    "\044\036\027\037\051\040\060\041\025\063\052\064\057" +
    "\065\063\066\053\067\050\001\002\000\036\006\u0109\011" +
    "\102\012\074\013\076\014\067\015\100\017\072\020\075" +
    "\021\073\022\077\023\066\024\065\025\101\030\070\001" +
    "\002\000\070\003\uffb9\010\uffb9\021\uffb9\025\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\044\uffb9\045\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072\uffb9\073" +
    "\uffb9\075\uffb9\076\uffb9\001\002\000\040\021\054\025\062" +
    "\032\061\033\040\034\023\035\044\036\027\037\051\040" +
    "\060\041\025\063\052\064\057\065\063\066\053\067\050" +
    "\001\002\000\036\005\u010c\011\102\012\074\013\076\014" +
    "\067\015\100\017\072\020\075\021\073\022\077\023\066" +
    "\024\065\025\101\030\070\001\002\000\004\007\u010d\001" +
    "\002\000\040\003\036\033\040\034\023\035\044\036\027" +
    "\041\025\042\033\044\034\045\020\051\024\052\032\053" +
    "\013\064\022\072\041\073\017\001\002\000\042\003\036" +
    "\010\u010f\033\040\034\023\035\044\036\027\041\025\042" +
    "\033\044\034\045\020\051\024\052\032\053\013\064\022" +
    "\072\041\073\017\001\002\000\046\003\uffc5\010\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\051\uffc5\052\uffc5\053\uffc5\064\uffc5\072\uffc5\073" +
    "\uffc5\075\uffc5\076\uffc5\001\002\000\006\006\u0111\026\u0112" +
    "\001\002\000\070\003\uffb7\010\uffb7\021\uffb7\025\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\044\uffb7\045\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\072\uffb7" +
    "\073\uffb7\075\uffb7\076\uffb7\001\002\000\040\021\054\025" +
    "\062\032\061\033\040\034\023\035\044\036\027\037\051" +
    "\040\060\041\025\063\052\064\057\065\063\066\053\067" +
    "\050\001\002\000\036\006\u0114\011\102\012\074\013\076" +
    "\014\067\015\100\017\072\020\075\021\073\022\077\023" +
    "\066\024\065\025\101\030\070\001\002\000\070\003\uffbc" +
    "\010\uffbc\021\uffbc\025\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc" +
    "\045\uffbc\051\uffbc\052\uffbc\053\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\066\uffbc\067\uffbc\072\uffbc\073\uffbc\075\uffbc\076\uffbc" +
    "\001\002\000\004\046\u0116\001\002\000\004\004\u0117\001" +
    "\002\000\040\021\054\025\062\032\061\033\040\034\023" +
    "\035\044\036\027\037\051\040\060\041\025\063\052\064" +
    "\057\065\063\066\053\067\050\001\002\000\036\005\u0119" +
    "\011\102\012\074\013\076\014\067\015\100\017\072\020" +
    "\075\021\073\022\077\023\066\024\065\025\101\030\070" +
    "\001\002\000\004\006\u011a\001\002\000\046\003\ufff8\010" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\041\ufff8\042\ufff8" +
    "\044\ufff8\045\ufff8\051\ufff8\052\ufff8\053\ufff8\064\ufff8\072" +
    "\ufff8\073\ufff8\075\ufff8\076\ufff8\001\002\000\040\021\054" +
    "\025\062\032\061\033\040\034\023\035\044\036\027\037" +
    "\051\040\060\041\025\063\052\064\057\065\063\066\053" +
    "\067\050\001\002\000\036\005\u011d\011\102\012\074\013" +
    "\076\014\067\015\100\017\072\020\075\021\073\022\077" +
    "\023\066\024\065\025\101\030\070\001\002\000\004\007" +
    "\u011e\001\002\000\004\075\u0121\001\002\000\006\075\u0121" +
    "\076\u0126\001\002\000\006\075\uffef\076\uffef\001\002\000" +
    "\040\021\054\025\062\032\061\033\040\034\023\035\044" +
    "\036\027\037\051\040\060\041\025\063\052\064\057\065" +
    "\063\066\053\067\050\001\002\000\036\011\102\012\074" +
    "\013\076\014\067\015\100\017\072\020\075\021\073\022" +
    "\077\023\066\024\065\025\101\030\070\074\u0123\001\002" +
    "\000\040\003\036\033\040\034\023\035\044\036\027\041" +
    "\025\042\033\044\034\045\020\051\024\052\032\053\013" +
    "\064\022\072\041\073\017\001\002\000\044\003\036\033" +
    "\040\034\023\035\044\036\027\041\025\042\033\044\034" +
    "\045\020\051\024\052\032\053\013\064\022\072\041\073" +
    "\017\075\uffee\076\uffee\001\002\000\006\075\ufff0\076\ufff0" +
    "\001\002\000\004\074\u0129\001\002\000\004\010\u0128\001" +
    "\002\000\046\003\ufff1\010\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\041\ufff1\042\ufff1\044\ufff1\045\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\064\ufff1\072\ufff1\073\ufff1\075\ufff1\076\ufff1" +
    "\001\002\000\040\003\036\033\040\034\023\035\044\036" +
    "\027\041\025\042\033\044\034\045\020\051\024\052\032" +
    "\053\013\064\022\072\041\073\017\001\002\000\042\003" +
    "\036\010\uffed\033\040\034\023\035\044\036\027\041\025" +
    "\042\033\044\034\045\020\051\024\052\032\053\013\064" +
    "\022\072\041\073\017\001\002\000\046\003\ufff9\010\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\041\ufff9\042\ufff9\044" +
    "\ufff9\045\ufff9\051\ufff9\052\ufff9\053\ufff9\064\ufff9\072\ufff9" +
    "\073\ufff9\075\ufff9\076\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\015\004\020\005" +
    "\025\007\036\010\014\011\027\012\041\013\013\023\030" +
    "\036\034\037\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\150\004\020\007\036\010\014\011\027\012\041\013" +
    "\013\023\030\036\034\037\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\054\006" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\054\006\145\001" +
    "\001\000\006\004\054\006\130\001\001\000\004\047\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\054\006\063\001\001\000\002\001\001" +
    "\000\004\047\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\054\006\114\001\001\000\006\004\054" +
    "\006\113\001\001\000\006\004\054\006\112\001\001\000" +
    "\006\004\054\006\111\001\001\000\006\004\054\006\110" +
    "\001\001\000\006\004\054\006\107\001\001\000\006\004" +
    "\054\006\106\001\001\000\006\004\054\006\105\001\001" +
    "\000\006\004\054\006\104\001\001\000\006\004\054\006" +
    "\103\001\001\000\002\001\001\000\006\004\054\006\102" +
    "\001\001\000\004\047\070\001\001\000\004\047\070\001" +
    "\001\000\004\047\070\001\001\000\004\047\070\001\001" +
    "\000\004\047\070\001\001\000\004\047\070\001\001\000" +
    "\004\047\070\001\001\000\004\047\070\001\001\000\004" +
    "\047\070\001\001\000\004\047\070\001\001\000\004\047" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\054\006\125\001\001" +
    "\000\004\047\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\133\047\070\001\001\000\006\004\054" +
    "\006\114\001\001\000\006\004\054\006\113\001\001\000" +
    "\006\004\054\006\140\001\001\000\006\004\054\006\107" +
    "\001\001\000\006\004\054\006\105\001\001\000\006\004" +
    "\054\006\103\001\001\000\006\004\054\006\102\001\001" +
    "\000\004\047\070\001\001\000\010\004\054\006\142\021" +
    "\143\001\001\000\004\047\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\070\001\001\000\030\003" +
    "\015\004\020\005\147\007\036\010\014\011\027\012\041" +
    "\013\013\023\030\036\034\037\042\001\001\000\026\003" +
    "\150\004\020\007\036\010\014\011\027\012\041\013\013" +
    "\023\030\036\034\037\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\054\006\154" +
    "\001\001\000\006\022\155\047\070\001\001\000\006\004" +
    "\054\006\156\001\001\000\004\047\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\054\006\164\001\001\000\004\047\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\054\006\170\001\001\000\004\047\070\001\001\000\002" +
    "\001\001\000\030\003\015\004\020\005\173\007\036\010" +
    "\014\011\027\012\041\013\013\023\030\036\034\037\042" +
    "\001\001\000\030\003\150\004\020\007\036\010\014\011" +
    "\027\012\041\013\013\016\174\023\030\036\034\037\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\015\004\020\005\207\007\036\010\014" +
    "\011\027\012\041\013\013\023\030\036\034\037\042\001" +
    "\001\000\002\001\001\000\006\004\054\006\202\001\001" +
    "\000\004\047\070\001\001\000\002\001\001\000\030\003" +
    "\015\004\020\005\205\007\036\010\014\011\027\012\041" +
    "\013\013\023\030\036\034\037\042\001\001\000\030\003" +
    "\150\004\020\007\036\010\014\011\027\012\041\013\013" +
    "\016\206\023\030\036\034\037\042\001\001\000\002\001" +
    "\001\000\026\003\150\004\020\007\036\010\014\011\027" +
    "\012\041\013\013\023\030\036\034\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\224\015\217\017\221\020\220\001\001\000\002\001\001" +
    "\000\010\014\224\015\231\017\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\054\006" +
    "\230\001\001\000\004\047\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\236\026\237\001\001\000\004\026\315\001\001" +
    "\000\002\001\001\000\004\030\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\251\034\254\035\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\251\034\254\035\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\304\032\303\033\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\304\032\303" +
    "\033\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\313\032\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\325" +
    "\044\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\251\034\254" +
    "\035\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\344\045\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\344\045\355\046\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\344\045\355\046\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\054\006\363\001\001\000\006\022\365\047" +
    "\070\001\001\000\002\001\001\000\006\004\054\006\366" +
    "\001\001\000\004\047\070\001\001\000\002\001\001\000" +
    "\030\003\015\004\020\005\371\007\036\010\014\011\027" +
    "\012\041\013\013\023\030\036\034\037\042\001\001\000" +
    "\026\003\150\004\020\007\036\010\014\011\027\012\041" +
    "\013\013\023\030\036\034\037\042\001\001\000\002\001" +
    "\001\000\030\003\015\004\020\005\374\007\036\010\014" +
    "\011\027\012\041\013\013\023\030\036\034\037\042\001" +
    "\001\000\026\003\150\004\020\007\036\010\014\011\027" +
    "\012\041\013\013\023\030\036\034\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\054\006\u0101\001\001\000\004\047\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\054\006\u0107\001\001\000\004\047" +
    "\070\001\001\000\002\001\001\000\006\004\054\006\u010a" +
    "\001\001\000\004\047\070\001\001\000\002\001\001\000" +
    "\030\003\015\004\020\005\u010d\007\036\010\014\011\027" +
    "\012\041\013\013\023\030\036\034\037\042\001\001\000" +
    "\026\003\150\004\020\007\036\010\014\011\027\012\041" +
    "\013\013\023\030\036\034\037\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\054" +
    "\006\u0112\001\001\000\004\047\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\054" +
    "\006\u0117\001\001\000\004\047\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\054\006\u011b\001\001" +
    "\000\004\047\070\001\001\000\002\001\001\000\006\040" +
    "\u011e\041\u011f\001\001\000\006\041\u0124\042\u0126\001\001" +
    "\000\002\001\001\000\006\004\054\006\u0121\001\001\000" +
    "\004\047\070\001\001\000\030\003\015\004\020\005\u0123" +
    "\007\036\010\014\011\027\012\041\013\013\023\030\036" +
    "\034\037\042\001\001\000\026\003\150\004\020\007\036" +
    "\010\014\011\027\012\041\013\013\023\030\036\034\037" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\015\004\020\005" +
    "\u0129\007\036\010\014\011\027\012\041\013\013\023\030" +
    "\036\034\037\042\001\001\000\026\003\150\004\020\007" +
    "\036\010\014\011\027\012\041\013\013\023\030\036\034" +
    "\037\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            func.Funcion.tabla_T_errores_stat((String)s.value, "Error Sintactico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            
}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            func.Funcion.tabla_T_errores_stat((String)s.value, "Error Sintactico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_VOID RESERVADA_MAIN PARENTESISABRE PARENTESISCIERRA LLAVEABRE lista_instruccion LLAVECIERRA 
            {
              Object RESULT =null;
		int variablenameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variablenameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object variablename = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            LinkedList<String>ola= new LinkedList<>();  
            ola.add("def main():");
            func.Traduccion.waozzz++;
            ola.addAll(func.Traduccion.tab((LinkedList)variablename));
            func.Traduccion.waozzz--;
            ola.add("if__name__ = \"__main__\":\n\tmain()");
            func.Traduccion.Trad=ola;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instruccion ::= lista_instruccion instruccion 
            {
              Object RESULT =null;
		int variablename1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variablename1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object variablename1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int inzzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inzzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inzzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<String> tod1 = new LinkedList<>(); tod1.addAll((LinkedList) variablename1); tod1.addAll((LinkedList)inzzz); RESULT =  tod1;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instruccion ::= instruccion 
            {
              Object RESULT =null;
		int inzzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inzzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inzzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<String>variablename= new LinkedList<>();  variablename.addAll((LinkedList)inzzz); RESULT = (LinkedList)variablename;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int agleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int agright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ag = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ag; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sentencias 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = sent ;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= console 
            {
              Object RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = cons;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= RESERVADA_BREAK PUNTOYCOMA 
            {
              Object RESULT =null;
		      LinkedList<String>variablename= new LinkedList<>();  
                                                                                    variablename.add("break") ; RESULT = variablename;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // console ::= RESERVADA_CONSOLE SIGNOPUNTO RESERVADA_WRITE PARENTESISABRE expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  LinkedList<String>variablename= new LinkedList<>();  variablename.add("print(" + valor + ")" ); RESULT = variablename;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencias ::= funciones 
            {
              Object RESULT =null;
		  LinkedList<String> ola= new LinkedList<>(); ola.add(" "); RESULT = ola; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias ::= switch 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = ch;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias ::= while 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = wh;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= for 
            {
              Object RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = fr;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= if 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = fi;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= do 
            {
              Object RESULT =null;
		int odleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int odright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object od = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = od;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // switch ::= RESERVADA_SWITCH PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE casos casoespecial LLAVECIERRA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object sos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int especialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int especialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object especial = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                            LinkedList<String>variablename= new LinkedList<>();  
                                            variablename.add("def switch(" + exp + "):" ); 
                                            func.Traduccion.waozzz++;
                                            LinkedList<String>name= new LinkedList<>();  
                                            name.add("switcher={" );
                                            variablename.addAll(func.Traduccion.tab((LinkedList)name));
                                            func.Traduccion.waozzz++; 
                                            variablename.addAll(func.Traduccion.tab((LinkedList)sos)); 
                                            variablename.addAll(func.Traduccion.tab((LinkedList)especial))  ; 
                                            func.Traduccion.waozzz--;
                                            LinkedList<String>name5= new LinkedList<>();  
                                            name5.add( "}" ); 
                                            variablename.addAll(func.Traduccion.tab((LinkedList)name5));
                                            func.Traduccion.waozzz--;
                                            RESULT = variablename;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // casos ::= casos caso 
            {
              Object RESULT =null;
		int cazzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cazzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cazzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cass1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cass1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cass1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<String> tod1 = new LinkedList<>(); tod1.addAll((LinkedList)cazzz); tod1.addAll((LinkedList)cass1); RESULT =  tod1;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // casos ::= caso 
            {
              Object RESULT =null;
		int cass2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cass2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cass2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<String> tod2 = new LinkedList<>();  tod2.addAll((LinkedList)cass2); RESULT = (LinkedList)tod2;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // caso ::= RESERVADA_CASE expresion DOSPUNTOS lista_instruccion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int inzzzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inzzzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inzzzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                    LinkedList<String>variablename= new LinkedList<>();  
                                    variablename.add(exp + ":"); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)inzzzz));
                                    LinkedList<String>variablename2 = new LinkedList<>();  variablename2.add(",");  
                                    variablename.addAll(func.Traduccion.tab((LinkedList)variablename2));
                                    func.Traduccion.waozzz--;          
                                    RESULT = (LinkedList)variablename;      
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // casoespecial ::= RESERVADA_DEFAULT DOSPUNTOS lista_instruccion 
            {
              Object RESULT =null;
		int inzzzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inzzzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inzzzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                    LinkedList<String>variablename= new LinkedList<>();  
                                    variablename.add("default: "); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)inzzzz));
                                    LinkedList<String>variablename2 = new LinkedList<>();  variablename2.add(",");  
                                    variablename.addAll(func.Traduccion.tab((LinkedList)variablename2));
                                    func.Traduccion.waozzz--;          
                                    RESULT = (LinkedList)variablename;                     
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casoespecial",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // do ::= RESERVADA_DO LLAVEABRE lista_instruccion LLAVECIERRA RESERVADA_WHILE PARENTESISABRE expresion comparativas expresion PARENTESISCIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int listazdoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int listazdoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object listazdo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("while True: "); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listazdo));
                                    LinkedList<String>variablename2= new LinkedList<>();  variablename2.add("if (" + e1.toString() + comp + e6.toString() + "):"); func.Traduccion.waozzz++; 
                                    LinkedList<String>variablename3= new LinkedList<>();  variablename3.add("break");
                                    variablename2.addAll(func.Traduccion.tab((LinkedList)variablename3));
                                    func.Traduccion.waozzz--;
                                    func.Traduccion.waozzz--; variablename.addAll((LinkedList)variablename2) ; RESULT = (LinkedList)variablename;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipos ::= RESERVADA_STRING 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipos ::= RESERVADA_DOUBLE 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funciones ::= RESERVADA_VOID RESERVADA_DEFINIRG PARENTESISABRE PARENTESISCIERRA LLAVEABRE probando LLAVECIERRA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funciones ::= RESERVADA_VOID RESERVADA_GRAFICARBARRAS PARENTESISABRE PARENTESISCIERRA LLAVEABRE probando2 LLAVECIERRA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funciones ::= RESERVADA_VOID RESERVADA_GRAFICARPIE PARENTESISABRE PARENTESISCIERRA LLAVEABRE probando3 LLAVECIERRA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // probando ::= probando intermedio 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probando",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // probando ::= intermedio 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probando",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // intermedio ::= expresfunc PUNTOYCOMA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresfunc ::= tipos ID SIGNOIGUAL expresion 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresfunc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // probando2 ::= probando2 intermedio2 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probando2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // probando2 ::= intermedio2 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probando2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // intermedio2 ::= RESERVADA_STRING titulos SIGNOIGUAL asignacion2 PUNTOYCOMA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // intermedio2 ::= RESERVADA_STRING CORCHETEABRE CORCHETECIERRA RESERVADA_EJEX SIGNOIGUAL LLAVEABRE listas LLAVECIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // intermedio2 ::= RESERVADA_DOUBLE CORCHETEABRE CORCHETECIERRA RESERVADA_VALORES SIGNOIGUAL LLAVEABRE listas2 LLAVECIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion2 ::= CADENA 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion2 ::= ID 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = ""; //RESULT = data.Info.listaVariables.get(va1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion2 ::= json 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listas ::= asignacion2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listas",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listas ::= asignacion2 SIGNOCOMA listas 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listas",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listas2 ::= asignacion3 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listas2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listas2 ::= asignacion3 SIGNOCOMA listas2 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listas2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion3 ::= DECIMALES 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion3 ::= ID 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = ""; //RESULT = data.Info.listaVariables.get(va1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion3 ::= json 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // probando3 ::= probando3 intermedio3 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probando3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // probando3 ::= intermedio3 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probando3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // intermedio3 ::= RESERVADA_STRING RESERVADA_TITULO SIGNOIGUAL asignacion4 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // intermedio3 ::= RESERVADA_STRING CORCHETEABRE CORCHETECIERRA RESERVADA_EJEX SIGNOIGUAL LLAVEABRE listas4 LLAVECIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // intermedio3 ::= RESERVADA_DOUBLE CORCHETEABRE CORCHETECIERRA RESERVADA_VALORES SIGNOIGUAL LLAVEABRE listas2 LLAVECIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intermedio3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion4 ::= CADENA 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion4",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion4 ::= ID 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  //RESULT = data.Info.listaVariables.get(va1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion4",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion4 ::= json 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion4",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listas4 ::= asignacion4 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listas4",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listas4 ::= asignacion4 SIGNOCOMA listas4 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listas4",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // json ::= DOLAR LLAVEABRE RESERVADA_NEWVALOR SIGNOCOMA CADENA SIGNOCOMA CADENA LLAVECIERRA 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("json",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // titulos ::= RESERVADA_TITULO 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // titulos ::= RESERVADA_TITULOX 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // titulos ::= RESERVADA_TITULOY 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for ::= RESERVADA_FOR PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE lista_instruccion LLAVECIERRA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listasforleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listasforright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listasfor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("for " + exp + " in range" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listasfor));
                                    func.Traduccion.waozzz--; RESULT = variablename;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while ::= RESERVADA_WHILE PARENTESISABRE expresion comparativas expresion PARENTESISCIERRA LLAVEABRE lista_instruccion LLAVECIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listazleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listazright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listaz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("while " + e1 + " " + comp + " " + e5 + ":" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listaz));
                                    func.Traduccion.waozzz--; RESULT = variablename;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // while ::= RESERVADA_WHILE PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE lista_instruccion LLAVECIERRA 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= RESERVADA_IF PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE lista_instruccion corchetec 
            {
              Object RESULT =null;
		int nombreifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombreif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listazifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listazifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listazif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cierreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cierreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cierre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("if " + nombreif + ":" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listazif));
                                    func.Traduccion.waozzz--;LinkedList<String>variablename1= new LinkedList<>();  
                                    variablename1.addAll((LinkedList)cierre); variablename.addAll(variablename1); RESULT = variablename;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // corchetec ::= LLAVECIERRA 
            {
              Object RESULT =null;
		  LinkedList<String>variablename= new LinkedList<>();  variablename.add(" ");  RESULT = variablename; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corchetec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // corchetec ::= LLAVECIERRA RESERVADA_ELSE RESERVADA_IF PARENTESISABRE expresion PARENTESISCIERRA LLAVEABRE lista_instruccion corchetec 
            {
              Object RESULT =null;
		int nombreifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombreif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listazifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listazifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listazif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cierreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cierreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cierre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    LinkedList<String>variablename= new LinkedList<>();  variablename.add("elif " + nombreif + ":" ); func.Traduccion.waozzz++;
                                    variablename.addAll(func.Traduccion.tab((LinkedList)listazif));
                                    func.Traduccion.waozzz--;  LinkedList<String>variablename1= new LinkedList<>();  
                                    variablename1.addAll((LinkedList)cierre); variablename.addAll(variablename1); RESULT = variablename;
                                    
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corchetec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // corchetec ::= LLAVECIERRA RESERVADA_ELSE LLAVEABRE lista_instruccion LLAVECIERRA 
            {
              Object RESULT =null;
		  RESULT = "";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corchetec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombre1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre1 + " = " + var1 ); RESULT = probandoo;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asignacion ::= RESERVADA_INT ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombre2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre2 + " = " + var2 ); RESULT = probandoo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= RESERVADA_DOUBLE ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombre3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre3 + " = " + var3 ); RESULT = probandoo;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion ::= RESERVADA_CHAR ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombre4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre4 + " = " + var4 ); RESULT = probandoo;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion ::= RESERVADA_BOOL ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombre5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre5 + " = " + var5 ); RESULT = probandoo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= RESERVADA_STRING ID SIGNOIGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombre6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombre6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre6 + " = " + var6 ); RESULT = probandoo;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= RESERVADA_INT ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombre7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre7 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre7 + " = None" ); RESULT = probandoo;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacion ::= RESERVADA_DOUBLE ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombre8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre8 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre8 + " = None"  ); RESULT = probandoo;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= RESERVADA_CHAR ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombre9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre9 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre9 + " = None"  ); RESULT = probandoo;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= RESERVADA_BOOL ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombre10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre10 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre10 + " = None" ); RESULT = probandoo;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacion ::= RESERVADA_STRING ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombre11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombre11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre11 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(nombre11 + " = None"  ); RESULT = probandoo;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // incremento ::= expresion SIGNOINCREMENTO 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object va1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= CHARR 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= DECIMALES 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= ID 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1; //data.Info.listaVariables.get(va1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= RESERVADA_TRUE 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= RESERVADA_FALSE 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion SIGNOMAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"+"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion SIGNOMENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"-"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion SIGNOPOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"*"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion SIGNODIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"/"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= SIGNONOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT=    " not "+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= SIGNOMENOS expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT=    "-"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion logicos expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() + c.toString() + b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion SIGNOMAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +">"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion SIGNOMAYORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +">="+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion SIGNOMENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"<"+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion SIGNOMENORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"<="+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion SIGNOIGUALIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"=="+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion SIGNODIFERENTE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT= a.toString() +"!="+ b.toString()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= asignacion expresion comparativas expresion PUNTOYCOMA incremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 LinkedList<String> probandoo = new LinkedList<>(); probandoo.add(a.toString() + b.toString() + c.toString()); RESULT = probandoo;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= DOLAR LLAVEABRE RESERVADA_NEWVALOR SIGNOCOMA CADENA SIGNOCOMA CADENA LLAVECIERRA 
            {
              Object RESULT =null;
		int va1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int va1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String va1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = va1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // logicos ::= SIGNOAND 
            {
              Object RESULT =null;
		 RESULT = " and "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // logicos ::= SIGNOOR 
            {
              Object RESULT =null;
		 RESULT = " or "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // logicos ::= SIGNONOT 
            {
              Object RESULT =null;
		 RESULT = " not "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // comparativas ::= SIGNOMAYORIGUAL 
            {
              Object RESULT =null;
		  RESULT = ">=";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparativas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // comparativas ::= SIGNOMAYOR 
            {
              Object RESULT =null;
		  RESULT = ">";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparativas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comparativas ::= SIGNOMENOR 
            {
              Object RESULT =null;
		  RESULT = "<";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparativas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comparativas ::= SIGNOMENORIGUAL 
            {
              Object RESULT =null;
		  RESULT = "<=";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparativas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // comparativas ::= SIGNODIFERENTE 
            {
              Object RESULT =null;
		  RESULT = "|=";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparativas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comparativas ::= SIGNOIGUALIGUAL 
            {
              Object RESULT =null;
		  RESULT = "==";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparativas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
